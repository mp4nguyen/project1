"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('angular2/core');
var http_1 = require('angular2/http');
var Observable_1 = require('rxjs/Observable');
require('rxjs/add/observable/throw');
require('rxjs/add/operator/map');
require('rxjs/add/operator/catch');
require('rxjs/add/operator/share');
var LoopBackAuth = (function () {
    function LoopBackAuth() {
        this.propsPrefix = '$LoopBack$';
        this.accessTokenId = this.load("accessTokenId");
        this.currentUserId = this.load("currentUserId");
        this.rememberMe = this.load("rememberMe");
        this.currentUserData = null;
    }
    LoopBackAuth.prototype.setRememberMe = function (value) {
        this.rememberMe = value;
        return this;
    };
    LoopBackAuth.prototype.getCurrentUserId = function () {
        return this.currentUserId;
    };
    LoopBackAuth.prototype.setCurrentUserData = function (data) {
        this.currentUserData = data;
        return this;
    };
    LoopBackAuth.prototype.getCurrentUserData = function () {
        return this.currentUserData;
    };
    LoopBackAuth.prototype.getAccessTokenId = function () {
        return this.accessTokenId;
    };
    LoopBackAuth.prototype.save = function () {
        var storage = this.rememberMe ? localStorage : sessionStorage;
        this.saveThis(storage, "accessTokenId", this.accessTokenId);
        this.saveThis(storage, "currentUserId", this.currentUserId);
        this.saveThis(storage, "rememberMe", this.rememberMe);
    };
    ;
    LoopBackAuth.prototype.setUser = function (accessTokenId, userId, userData) {
        this.accessTokenId = accessTokenId;
        this.currentUserId = userId;
        this.currentUserData = userData;
    };
    LoopBackAuth.prototype.clearUser = function () {
        this.accessTokenId = null;
        this.currentUserId = null;
        this.currentUserData = null;
    };
    LoopBackAuth.prototype.clearStorage = function () {
        this.saveThis(sessionStorage, "accessTokenId", null);
        this.saveThis(localStorage, "accessTokenId", null);
        this.saveThis(sessionStorage, "currentUserId", null);
        this.saveThis(localStorage, "currentUserId", null);
        this.saveThis(sessionStorage, "rememberMe", null);
        this.saveThis(localStorage, "rememberMe", null);
    };
    ;
    LoopBackAuth.prototype.saveThis = function (storage, name, value) {
        try {
            var key = this.propsPrefix + name;
            if (value == null) {
                value = '';
            }
            storage[key] = value;
        }
        catch (err) {
            console.log('Cannot access local/session storage:', err);
        }
    };
    LoopBackAuth.prototype.load = function (name) {
        var key = this.propsPrefix + name;
        return localStorage[key] || sessionStorage[key] || null;
    };
    return LoopBackAuth;
}());
var auth = new LoopBackAuth();
var ErrorHandler = (function () {
    function ErrorHandler() {
    }
    ErrorHandler.prototype.handleError = function (error) {
        return Observable_1.Observable.throw(error.json().error || 'Server error');
    };
    return ErrorHandler;
}());
exports.ErrorHandler = ErrorHandler;
var BaseLoopBackApi = (function () {
    function BaseLoopBackApi(http, errorHandler) {
        this.http = http;
        this.errorHandler = errorHandler;
        if (!errorHandler) {
            this.errorHandler = new ErrorHandler();
        }
        this.init();
    }
    BaseLoopBackApi.prototype.getPath = function () {
        return this.path;
    };
    BaseLoopBackApi.prototype.init = function () {
        this.path = "https://localhost:3000/api";
    };
    BaseLoopBackApi.prototype.request = function (method, url, urlParams, params, data) {
        if (urlParams === void 0) { urlParams = {}; }
        if (params === void 0) { params = {}; }
        if (data === void 0) { data = null; }
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        if (auth.getAccessTokenId()) {
            headers.append('Authorization', auth.getAccessTokenId());
        }
        var requestUrl = url;
        var key;
        for (key in urlParams) {
            requestUrl = requestUrl.replace(new RegExp(":" + key + "(\/|$)", "g"), urlParams[key] + "$1");
        }
        var parameters = [];
        for (var param in params) {
            parameters.push(param + '=' + (typeof params[param] === 'object' ? JSON.stringify(params[param]) : params[param]));
        }
        requestUrl += (parameters ? '?' : '') + parameters.join('&');
        var request = new http_1.Request({
            headers: headers,
            method: method,
            url: requestUrl,
            body: data ? JSON.stringify(data) : undefined
        });
        return this.http.request(request)
            .map(function (res) { return (res.text() != "" ? res.json() : {}); })
            .catch(this.errorHandler.handleError);
    };
    BaseLoopBackApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], BaseLoopBackApi);
    return BaseLoopBackApi;
}());
exports.BaseLoopBackApi = BaseLoopBackApi;
var UserApi = (function (_super) {
    __extends(UserApi, _super);
    function UserApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    UserApi.prototype.__findById__accessTokens = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/Users/:id/accessTokens/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.__destroyById__accessTokens = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/Users/:id/accessTokens/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.__updateById__accessTokens = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/Users/:id/accessTokens/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.__get__accessTokens = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/:id/accessTokens";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.__create__accessTokens = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/Users/:id/accessTokens";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.__delete__accessTokens = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/Users/:id/accessTokens";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.__count__accessTokens = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/:id/accessTokens/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/Users";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/Users";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/Users";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/Users/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/Users/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/Users/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/Users/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    UserApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/Users/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    UserApi.prototype.login = function (credentials, include) {
        if (include === void 0) { include = "user"; }
        var method = "POST";
        var url = this.getPath() + "/Users/login";
        var urlParams = {};
        var params = {};
        if (include !== undefined) {
            params.include = include;
        }
        var result = this.request(method, url, urlParams, params, credentials)
            .share();
        result.subscribe(function (response) {
            auth.setUser(response.id, response.userId, response.user);
            auth.setRememberMe(true);
            auth.save();
        }, function () { return null; });
        return result;
    };
    UserApi.prototype.logout = function () {
        var method = "POST";
        var url = this.getPath() + "/Users/logout";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params)
            .share();
        result.subscribe(function () {
            auth.clearUser();
            auth.clearStorage();
        }, function () { return null; });
        return result;
    };
    UserApi.prototype.confirm = function (uid, token, redirect) {
        if (redirect === void 0) { redirect = undefined; }
        var method = "GET";
        var url = this.getPath() + "/Users/confirm";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    UserApi.prototype.resetPassword = function (options) {
        var method = "POST";
        var url = this.getPath() + "/Users/reset";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    UserApi.prototype.getCurrent = function () {
        var method = "GET";
        var url = this.getPath() + "/Users" + "/:id";
        var id = auth.getCurrentUserId();
        if (id == null) {
            id = '__anonymous__';
        }
        var urlParams = {
            id: id
        };
        var result = this.request(method, url, urlParams)
            .share();
        result.subscribe(function (response) {
            auth.setCurrentUserData(response);
        }, function () { return null; });
        return result;
    };
    UserApi.prototype.getCachedCurrent = function () {
        return auth.getCurrentUserData();
    };
    UserApi.prototype.isAuthenticated = function () {
        return this.getCurrentId() != null;
    };
    UserApi.prototype.getCurrentId = function () {
        return auth.getCurrentUserId();
    };
    UserApi.prototype.getModelName = function () {
        return "User";
    };
    UserApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], UserApi);
    return UserApi;
}(BaseLoopBackApi));
exports.UserApi = UserApi;
var CBookingTypesApi = (function (_super) {
    __extends(CBookingTypesApi, _super);
    function CBookingTypesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CBookingTypesApi.prototype.__findById__CClinicBookingTypes = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__destroyById__CClinicBookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__updateById__CClinicBookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.__findById__Clinics = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__destroyById__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__updateById__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.__link__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.__unlink__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__exists__Clinics = function (id, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__get__CClinicBookingTypes = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__create__CClinicBookingTypes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.__delete__CClinicBookingTypes = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__count__CClinicBookingTypes = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__get__Clinics = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__create__Clinics = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.__delete__Clinics = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__count__Clinics = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/Clinics/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CBookingTypesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CBookingTypesApi.prototype.__get__CClinicBookingTypes__BookingTypes = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.__get__CDoctorBookingTypes__BookingTypes = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CBookingTypesApi.prototype.getModelName = function () {
        return "CBookingTypes";
    };
    CBookingTypesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CBookingTypesApi);
    return CBookingTypesApi;
}(BaseLoopBackApi));
exports.CBookingTypesApi = CBookingTypesApi;
var CClinicBookingTypesApi = (function (_super) {
    __extends(CClinicBookingTypesApi, _super);
    function CClinicBookingTypesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CClinicBookingTypesApi.prototype.__get__BookingTypes = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.__get__Clinics = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinicBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinicBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinicBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinicBookingTypes/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinicBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinicBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinicBookingTypes/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CClinicBookingTypesApi.prototype.__findById__CBookingTypes__CClinicBookingTypes = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.__destroyById__CBookingTypes__CClinicBookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.__updateById__CBookingTypes__CClinicBookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.__get__CBookingTypes__CClinicBookingTypes = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.__create__CBookingTypes__CClinicBookingTypes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.__createMany__CBookingTypes__CClinicBookingTypes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicBookingTypesApi.prototype.__delete__CBookingTypes__CClinicBookingTypes = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.__count__CBookingTypes__CClinicBookingTypes = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CBookingTypes/:id/CClinicBookingTypes/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicBookingTypesApi.prototype.getModelName = function () {
        return "CClinicBookingTypes";
    };
    CClinicBookingTypesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CClinicBookingTypesApi);
    return CClinicBookingTypesApi;
}(BaseLoopBackApi));
exports.CClinicBookingTypesApi = CClinicBookingTypesApi;
var CDoctorBookingTypesApi = (function (_super) {
    __extends(CDoctorBookingTypesApi, _super);
    function CDoctorBookingTypesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CDoctorBookingTypesApi.prototype.__get__BookingTypes = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.__get__Doctors = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorBookingTypesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorBookingTypesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctorBookingTypes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorBookingTypesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorBookingTypes/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorBookingTypesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctorBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorBookingTypesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctorBookingTypes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorBookingTypesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorBookingTypes/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CDoctorBookingTypesApi.prototype.getModelName = function () {
        return "CDoctorBookingTypes";
    };
    CDoctorBookingTypesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CDoctorBookingTypesApi);
    return CDoctorBookingTypesApi;
}(BaseLoopBackApi));
exports.CDoctorBookingTypesApi = CDoctorBookingTypesApi;
var CDoctorClinicsApi = (function (_super) {
    __extends(CDoctorClinicsApi, _super);
    function CDoctorClinicsApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CDoctorClinicsApi.prototype.__get__Doctors = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.__get__Clinics = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorClinicsApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorClinicsApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctorClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorClinicsApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorClinics/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorClinicsApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctorClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorClinicsApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctorClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorClinicsApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctorClinics/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CDoctorClinicsApi.prototype.getModelName = function () {
        return "CDoctorClinics";
    };
    CDoctorClinicsApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CDoctorClinicsApi);
    return CDoctorClinicsApi;
}(BaseLoopBackApi));
exports.CDoctorClinicsApi = CDoctorClinicsApi;
var CDoctorsApi = (function (_super) {
    __extends(CDoctorsApi, _super);
    function CDoctorsApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CDoctorsApi.prototype.__findById__BookingTypes = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__BookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__BookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__link__BookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__unlink__BookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__exists__BookingTypes = function (id, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__Person = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Person";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__findById__People = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__People = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__People = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__findById__Rosters = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__Rosters = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__Rosters = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__findById__Clinics = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__link__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__unlink__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__exists__Clinics = function (id, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CDoctors/:id/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__BookingTypes = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__BookingTypes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__BookingTypes = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__BookingTypes = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__People = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__People = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__People = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__People = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__Rosters = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__Rosters = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__Rosters = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__Rosters = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__Clinics = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__Clinics = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__Clinics = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__Clinics = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CDoctorsApi.prototype.__findById__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__Clinics__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__link__Clinics__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__unlink__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__exists__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__findById__Clinics__Doctors = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__Clinics__Doctors = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__Clinics__Doctors = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__link__Clinics__Doctors = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__unlink__Clinics__Doctors = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__exists__Clinics__Doctors = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__Clinics__BookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__Clinics__BookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__Clinics__BookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__Clinics__BookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/BookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__Clinics__Doctors = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__Clinics__Doctors = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__Clinics__Doctors = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__Clinics__Doctors = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Clinics/:nk/Doctors/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__findById__BookingTypes__CClinicBookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__BookingTypes__CClinicBookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__BookingTypes__CClinicBookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__findById__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__BookingTypes__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__link__BookingTypes__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__unlink__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__exists__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__BookingTypes__CClinicBookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__BookingTypes__CClinicBookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__BookingTypes__CClinicBookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__BookingTypes__CClinicBookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/CClinicBookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__BookingTypes__Clinics = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__BookingTypes__Clinics = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__BookingTypes__Clinics = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__BookingTypes__Clinics = function (nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/BookingTypes/:nk/Clinics/count";
        var urlParams = {
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__CDoctorBookingTypes__Doctors = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorBookingTypes/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__get__CDoctorClinics__Doctors = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__findById__CCompanies__Doctors = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__destroyById__CCompanies__Doctors = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__updateById__CCompanies__Doctors = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__get__CCompanies__Doctors = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__create__CCompanies__Doctors = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__createMany__CCompanies__Doctors = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CDoctorsApi.prototype.__delete__CCompanies__Doctors = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.__count__CCompanies__Doctors = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CDoctorsApi.prototype.getModelName = function () {
        return "CDoctors";
    };
    CDoctorsApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CDoctorsApi);
    return CDoctorsApi;
}(BaseLoopBackApi));
exports.CDoctorsApi = CDoctorsApi;
var CGalleryApi = (function (_super) {
    __extends(CGalleryApi, _super);
    function CGalleryApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CGalleryApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CGalleries";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CGalleries";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CGalleries";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CGalleries/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CGalleries/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CGalleries";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CGalleries/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CGalleries/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CGalleries/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CGalleries/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CGalleries/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CGalleries/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CGalleryApi.prototype.__findById__CCompanies__Galleries = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.__destroyById__CCompanies__Galleries = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.__updateById__CCompanies__Galleries = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.__get__CCompanies__Galleries = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.__create__CCompanies__Galleries = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.__createMany__CCompanies__Galleries = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CGalleryApi.prototype.__delete__CCompanies__Galleries = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.__count__CCompanies__Galleries = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CGalleryApi.prototype.getModelName = function () {
        return "CGallery";
    };
    CGalleryApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CGalleryApi);
    return CGalleryApi;
}(BaseLoopBackApi));
exports.CGalleryApi = CGalleryApi;
var CPeopleApi = (function (_super) {
    __extends(CPeopleApi, _super);
    function CPeopleApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CPeopleApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CPeople";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CPeople";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CPeople";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CPeople/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CPeople/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CPeople";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CPeople/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CPeople/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CPeople/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CPeople/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CPeople/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CPeople/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CPeopleApi.prototype.__get__CDoctors__Person = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Person";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.__findById__CDoctors__People = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.__destroyById__CDoctors__People = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.__updateById__CDoctors__People = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/People/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.__get__CDoctors__People = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.__create__CDoctors__People = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.__createMany__CDoctors__People = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CPeopleApi.prototype.__delete__CDoctors__People = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/People";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.__count__CDoctors__People = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/People/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CPeopleApi.prototype.getModelName = function () {
        return "CPeople";
    };
    CPeopleApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CPeopleApi);
    return CPeopleApi;
}(BaseLoopBackApi));
exports.CPeopleApi = CPeopleApi;
var CRostersApi = (function (_super) {
    __extends(CRostersApi, _super);
    function CRostersApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CRostersApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosters";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosters";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosters";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CRosters/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosters/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosters";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosters/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosters/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CRosters/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosters/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosters/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosters/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CRostersApi.prototype.generateRoster = function (def) {
        if (def === void 0) { def = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosters/generateRoster";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, def);
        return result;
    };
    CRostersApi.prototype.__findById__CDoctors__Rosters = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.__destroyById__CDoctors__Rosters = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.__updateById__CDoctors__Rosters = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CDoctors/:id/Rosters/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.__get__CDoctors__Rosters = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.__create__CDoctors__Rosters = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.__createMany__CDoctors__Rosters = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRostersApi.prototype.__delete__CDoctors__Rosters = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CDoctors/:id/Rosters";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.__count__CDoctors__Rosters = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctors/:id/Rosters/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRostersApi.prototype.getModelName = function () {
        return "CRosters";
    };
    CRostersApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CRostersApi);
    return CRostersApi;
}(BaseLoopBackApi));
exports.CRostersApi = CRostersApi;
var CRosterDaysApi = (function (_super) {
    __extends(CRosterDaysApi, _super);
    function CRosterDaysApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CRosterDaysApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterDays";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterDaysApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterDays";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterDaysApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterDays";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterDaysApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CRosterDays/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterDays/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterDays";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterDays/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterDays/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterDaysApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CRosterDays/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterDays/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterDaysApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterDays/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterDaysApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterDays/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CRosterDaysApi.prototype.getModelName = function () {
        return "CRosterDays";
    };
    CRosterDaysApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CRosterDaysApi);
    return CRosterDaysApi;
}(BaseLoopBackApi));
exports.CRosterDaysApi = CRosterDaysApi;
var CRosterPlacesApi = (function (_super) {
    __extends(CRosterPlacesApi, _super);
    function CRosterPlacesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CRosterPlacesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterPlaces";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterPlacesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterPlaces";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterPlacesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterPlaces";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterPlacesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CRosterPlaces/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterPlaces/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterPlaces";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterPlaces/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterPlaces/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterPlacesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CRosterPlaces/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterPlaces/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterPlacesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterPlaces/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterPlacesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterPlaces/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CRosterPlacesApi.prototype.getModelName = function () {
        return "CRosterPlaces";
    };
    CRosterPlacesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CRosterPlacesApi);
    return CRosterPlacesApi;
}(BaseLoopBackApi));
exports.CRosterPlacesApi = CRosterPlacesApi;
var CReviewsApi = (function (_super) {
    __extends(CReviewsApi, _super);
    function CReviewsApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CReviewsApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CReviews";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CReviewsApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CReviews";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CReviewsApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CReviews";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CReviewsApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CReviews/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CReviews/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CReviews";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CReviews/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CReviews/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CReviewsApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CReviews/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CReviews/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CReviewsApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CReviews/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CReviewsApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CReviews/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CReviewsApi.prototype.getModelName = function () {
        return "CReviews";
    };
    CReviewsApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CReviewsApi);
    return CReviewsApi;
}(BaseLoopBackApi));
exports.CReviewsApi = CReviewsApi;
var CRosterTimesApi = (function (_super) {
    __extends(CRosterTimesApi, _super);
    function CRosterTimesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CRosterTimesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterTimes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterTimesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterTimes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterTimesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterTimes";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterTimesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CRosterTimes/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterTimes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterTimes";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterTimes/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterTimes/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterTimesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CRosterTimes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CRosterTimes/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CRosterTimesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CRosterTimes/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CRosterTimesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CRosterTimes/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CRosterTimesApi.prototype.getModelName = function () {
        return "CRosterTimes";
    };
    CRosterTimesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CRosterTimesApi);
    return CRosterTimesApi;
}(BaseLoopBackApi));
exports.CRosterTimesApi = CRosterTimesApi;
var CClinicsApi = (function (_super) {
    __extends(CClinicsApi, _super);
    function CClinicsApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CClinicsApi.prototype.__findById__BookingTypes = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__BookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__BookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__link__BookingTypes = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__unlink__BookingTypes = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__exists__BookingTypes = function (id, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__findById__Doctors = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__Doctors = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__Doctors = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__link__Doctors = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__unlink__Doctors = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__exists__Doctors = function (id, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CClinics/:id/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__BookingTypes = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__BookingTypes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__BookingTypes = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__BookingTypes = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__Doctors = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__Doctors = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__Doctors = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CClinicsApi.prototype.__findById__BookingTypes__CClinicBookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__BookingTypes__CClinicBookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__BookingTypes__CClinicBookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__findById__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__BookingTypes__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__link__BookingTypes__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__unlink__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__exists__BookingTypes__Clinics = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__BookingTypes__CClinicBookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__BookingTypes__CClinicBookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__BookingTypes__CClinicBookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__BookingTypes__CClinicBookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/CClinicBookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__BookingTypes__Clinics = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__BookingTypes__Clinics = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__BookingTypes__Clinics = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__BookingTypes__Clinics = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/BookingTypes/:nk/Clinics/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__findById__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__Doctors__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__link__Doctors__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__unlink__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__exists__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors__Person = function (id, nk, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Person";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__findById__Doctors__People = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__Doctors__People = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__Doctors__People = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__findById__Doctors__Rosters = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__Doctors__Rosters = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__Doctors__Rosters = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__findById__Doctors__Clinics = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__Doctors__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__Doctors__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__link__Doctors__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__unlink__Doctors__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__exists__Doctors__Clinics = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors__BookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__Doctors__BookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__Doctors__BookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__Doctors__BookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/BookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors__People = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__Doctors__People = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__Doctors__People = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__Doctors__People = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/People/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors__Rosters = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__Doctors__Rosters = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__Doctors__Rosters = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__Doctors__Rosters = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Rosters/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__Doctors__Clinics = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__Doctors__Clinics = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__Doctors__Clinics = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__Doctors__Clinics = function (nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinics/:id/Doctors/:nk/Clinics/count";
        var urlParams = {
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__CClinicBookingTypes__Clinics = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CClinicBookingTypes/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__get__CDoctorClinics__Clinics = function (id, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CDoctorClinics/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__findById__CCompanies__Clinics = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__destroyById__CCompanies__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__updateById__CCompanies__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__get__CCompanies__Clinics = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__create__CCompanies__Clinics = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__createMany__CCompanies__Clinics = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CClinicsApi.prototype.__delete__CCompanies__Clinics = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.__count__CCompanies__Clinics = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CClinicsApi.prototype.getModelName = function () {
        return "CClinics";
    };
    CClinicsApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CClinicsApi);
    return CClinicsApi;
}(BaseLoopBackApi));
exports.CClinicsApi = CClinicsApi;
var CCompaniesApi = (function (_super) {
    __extends(CCompaniesApi, _super);
    function CCompaniesApi(http, errorHandler) {
        _super.call(this, http, errorHandler);
    }
    CCompaniesApi.prototype.__findById__Clinics = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Clinics = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Clinics = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__findById__Galleries = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Galleries = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Galleries = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Galleries/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__findById__Doctors = function (id, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Doctors = function (id, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Doctors = function (id, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:fk";
        var urlParams = {
            id: id,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__get__Clinics = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Clinics = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Clinics = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Clinics = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Galleries = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Galleries = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Galleries = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Galleries";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Galleries = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Galleries/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Doctors = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Doctors = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Doctors = function (id, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/count";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.create = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.createMany = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.upsert = function (data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.exists = function (id) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/exists";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.findById = function (id, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.find = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.findOne = function (filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/findOne";
        var urlParams = {};
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.updateAll = function (where, data) {
        if (where === void 0) { where = undefined; }
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/update";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.deleteById = function (id) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.count = function (where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/count";
        var urlParams = {};
        var params = {};
        if (where !== undefined) {
            params.where = where;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.updateAttributes = function (id, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id";
        var urlParams = {
            id: id
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.createChangeStream = function (options) {
        if (options === void 0) { options = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/change-stream";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, options);
        return result;
    };
    CCompaniesApi.prototype.generateRoster = function (def) {
        if (def === void 0) { def = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/generateRoster";
        var urlParams = {};
        var params = {};
        var result = this.request(method, url, urlParams, params, def);
        return result;
    };
    CCompaniesApi.prototype.__findById__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Clinics__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__link__Clinics__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__unlink__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__exists__Clinics__BookingTypes = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__findById__Clinics__Doctors = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Clinics__Doctors = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Clinics__Doctors = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__link__Clinics__Doctors = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__unlink__Clinics__Doctors = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__exists__Clinics__Doctors = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Clinics__BookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Clinics__BookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Clinics__BookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Clinics__BookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/BookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Clinics__Doctors = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Clinics__Doctors = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Clinics__Doctors = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Clinics__Doctors = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Clinics/:nk/Doctors/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__findById__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Doctors__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__link__Doctors__BookingTypes = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__unlink__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__exists__Doctors__BookingTypes = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors__Person = function (id, nk, refresh) {
        if (refresh === void 0) { refresh = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Person";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (refresh !== undefined) {
            params.refresh = refresh;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__findById__Doctors__People = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Doctors__People = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Doctors__People = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__findById__Doctors__Rosters = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Doctors__Rosters = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Doctors__Rosters = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__findById__Doctors__Clinics = function (id, nk, fk) {
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__destroyById__Doctors__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__updateById__Doctors__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__link__Doctors__Clinics = function (id, nk, fk, data) {
        if (data === void 0) { data = undefined; }
        var method = "PUT";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__unlink__Doctors__Clinics = function (id, nk, fk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__exists__Doctors__Clinics = function (id, nk, fk) {
        var method = "HEAD";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/rel/:fk";
        var urlParams = {
            id: id,
            nk: nk,
            fk: fk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors__BookingTypes = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Doctors__BookingTypes = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Doctors__BookingTypes = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Doctors__BookingTypes = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/BookingTypes/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors__People = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Doctors__People = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Doctors__People = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Doctors__People = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/People/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors__Rosters = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Doctors__Rosters = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Doctors__Rosters = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Doctors__Rosters = function (id, nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Rosters/count";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__get__Doctors__Clinics = function (id, nk, filter) {
        if (filter === void 0) { filter = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        if (filter !== undefined) {
            params.filter = filter;
        }
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__create__Doctors__Clinics = function (id, nk, data) {
        if (data === void 0) { data = undefined; }
        var method = "POST";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params, data);
        return result;
    };
    CCompaniesApi.prototype.__delete__Doctors__Clinics = function (id, nk) {
        var method = "DELETE";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics";
        var urlParams = {
            id: id,
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.__count__Doctors__Clinics = function (nk, where) {
        if (where === void 0) { where = undefined; }
        var method = "GET";
        var url = this.getPath() + "/CCompanies/:id/Doctors/:nk/Clinics/count";
        var urlParams = {
            nk: nk
        };
        var params = {};
        var result = this.request(method, url, urlParams, params);
        return result;
    };
    CCompaniesApi.prototype.getModelName = function () {
        return "CCompanies";
    };
    CCompaniesApi = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.Http)),
        __param(1, core_1.Optional()),
        __param(1, core_1.Inject(ErrorHandler)), 
        __metadata('design:paramtypes', [http_1.Http, ErrorHandler])
    ], CCompaniesApi);
    return CCompaniesApi;
}(BaseLoopBackApi));
exports.CCompaniesApi = CCompaniesApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC9zZXJ2aWNlcy9sYnNlcnZpY2VzXy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxxQkFBMkMsZUFBZSxDQUFDLENBQUE7QUFDM0QscUJBQStDLGVBQWUsQ0FBQyxDQUFBO0FBQy9ELDJCQUF5QixpQkFBaUIsQ0FBQyxDQUFBO0FBQzNDLFFBQU8sMkJBQTJCLENBQUMsQ0FBQTtBQUNuQyxRQUFPLHVCQUF1QixDQUFDLENBQUE7QUFDL0IsUUFBTyx5QkFBeUIsQ0FBQyxDQUFBO0FBQ2pDLFFBQU8seUJBQXlCLENBQUMsQ0FBQTtBQVlqQztJQVFFO1FBRlUsZ0JBQVcsR0FBVyxZQUFZLENBQUM7UUFHM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVNLG9DQUFhLEdBQXBCLFVBQXFCLEtBQWM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSx1Q0FBZ0IsR0FBdkI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRU0seUNBQWtCLEdBQXpCLFVBQTBCLElBQVM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSx5Q0FBa0IsR0FBekI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRU0sdUNB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LENBQUM7O3FCQUx4QjtJQTIwRmIsb0JBQUM7QUFBRCxDQTEwRkEsQUEwMEZDLENBMTBGa0MsZUFBZSxHQTAwRmpEO0FBMTBGWSxxQkFBYSxnQkEwMEZ6QixDQUFBIiwiZmlsZSI6InNoYXJlZC9zZXJ2aWNlcy9sYnNlcnZpY2VzXy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG5pbXBvcnQge0luamVjdGFibGUsIEluamVjdCwgT3B0aW9uYWx9IGZyb20gJ2FuZ3VsYXIyL2NvcmUnO1xuaW1wb3J0IHtIdHRwLCBIZWFkZXJzLCBSZXF1ZXN0LCBSZXNwb25zZX0gZnJvbSAnYW5ndWxhcjIvaHR0cCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvdGhyb3cnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3NoYXJlJztcblxuZXhwb3J0IGludGVyZmFjZSBMb29wQmFja0ZpbHRlckludGVyZmFjZSB7XG4gIGZpZWxkcz86IGFueTtcbiAgaW5jbHVkZT86IGFueTtcbiAgbGltaXQ/OiBhbnk7XG4gIG9yZGVyPzogYW55O1xuICBza2lwPzogYW55O1xuICBvZmZzZXQ/OiBhbnk7XG4gIHdoZXJlPzogYW55O1xufVxuXG5jbGFzcyBMb29wQmFja0F1dGgge1xuICBwcm90ZWN0ZWQgYWNjZXNzVG9rZW5JZDogYW55O1xuICBwcm90ZWN0ZWQgY3VycmVudFVzZXJJZDogYW55O1xuICBwcm90ZWN0ZWQgcmVtZW1iZXJNZTogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIGN1cnJlbnRVc2VyRGF0YTogYW55O1xuXG4gIHByb3RlY3RlZCBwcm9wc1ByZWZpeDogc3RyaW5nID0gJyRMb29wQmFjayQnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWNjZXNzVG9rZW5JZCA9IHRoaXMubG9hZChcImFjY2Vzc1Rva2VuSWRcIik7XG4gICAgdGhpcy5jdXJyZW50VXNlcklkID0gdGhpcy5sb2FkKFwiY3VycmVudFVzZXJJZFwiKTtcbiAgICB0aGlzLnJlbWVtYmVyTWUgPSB0aGlzLmxvYWQoXCJyZW1lbWJlck1lXCIpO1xuICAgIHRoaXMuY3VycmVudFVzZXJEYXRhID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRSZW1lbWJlck1lKHZhbHVlOiBib29sZWFuKTogTG9vcEJhY2tBdXRoIHtcbiAgICB0aGlzLnJlbWVtYmVyTWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBnZXRDdXJyZW50VXNlcklkKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFVzZXJJZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRDdXJyZW50VXNlckRhdGEoZGF0YTogYW55KTogTG9vcEJhY2tBdXRoIHtcbiAgICB0aGlzLmN1cnJlbnRVc2VyRGF0YSA9IGRhdGE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q3VycmVudFVzZXJEYXRhKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFVzZXJEYXRhO1xuICB9XG5cbiAgcHVibGljIGdldEFjY2Vzc1Rva2VuSWQoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlbklkO1xuICB9XG5cbiAgcHVibGljIHNhdmUoKSB7XG4gICAgdmFyIHN0b3JhZ2UgPSB0aGlzLnJlbWVtYmVyTWUgPyBsb2NhbFN0b3JhZ2UgOiBzZXNzaW9uU3RvcmFnZTtcbiAgICB0aGlzLnNhdmVUaGlzKHN0b3JhZ2UsIFwiYWNjZXNzVG9rZW5JZFwiLCB0aGlzLmFjY2Vzc1Rva2VuSWQpO1xuICAgIHRoaXMuc2F2ZVRoaXMoc3RvcmFnZSwgXCJjdXJyZW50VXNlcklkXCIsIHRoaXMuY3VycmVudFVzZXJJZCk7XG4gICAgdGhpcy5zYXZlVGhpcyhzdG9yYWdlLCBcInJlbWVtYmVyTWVcIiwgdGhpcy5yZW1lbWJlck1lKTtcbiAgfTtcblxuICBwdWJsaWMgc2V0VXNlcihhY2Nlc3NUb2tlbklkOiBhbnksIHVzZXJJZDogYW55LCB1c2VyRGF0YTogYW55KSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbklkID0gYWNjZXNzVG9rZW5JZDtcbiAgICB0aGlzLmN1cnJlbnRVc2VySWQgPSB1c2VySWQ7XG4gICAgdGhpcy5jdXJyZW50VXNlckRhdGEgPSB1c2VyRGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhclVzZXIoKSB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbklkID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRVc2VySWQgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFVzZXJEYXRhID0gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhclN0b3JhZ2UoKSB7XG4gICAgdGhpcy5zYXZlVGhpcyhzZXNzaW9uU3RvcmFnZSwgXCJhY2Nlc3NUb2tlbklkXCIsIG51bGwpO1xuICAgIHRoaXMuc2F2ZVRoaXMobG9jYWxTdG9yYWdlLCBcImFjY2Vzc1Rva2VuSWRcIiwgbnVsbCk7XG4gICAgdGhpcy5zYXZlVGhpcyhzZXNzaW9uU3RvcmFnZSwgXCJjdXJyZW50VXNlcklkXCIsIG51bGwpO1xuICAgIHRoaXMuc2F2ZVRoaXMobG9jYWxTdG9yYWdlLCBcImN1cnJlbnRVc2VySWRcIiwgbnVsbCk7XG4gICAgdGhpcy5zYXZlVGhpcyhzZXNzaW9uU3RvcmFnZSwgXCJyZW1lbWJlck1lXCIsIG51bGwpO1xuICAgIHRoaXMuc2F2ZVRoaXMobG9jYWxTdG9yYWdlLCBcInJlbWVtYmVyTWVcIiwgbnVsbCk7XG4gIH07XG5cbiAgLy8gTm90ZTogTG9jYWxTdG9yYWdlIGNvbnZlcnRzIHRoZSB2YWx1ZSB0byBzdHJpbmdcbiAgLy8gV2UgYXJlIHVzaW5nIGVtcHR5IHN0cmluZyBhcyBhIG1hcmtlciBmb3IgbnVsbC91bmRlZmluZWQgdmFsdWVzLlxuICBwcm90ZWN0ZWQgc2F2ZVRoaXMoc3RvcmFnZTogYW55LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGtleSA9IHRoaXMucHJvcHNQcmVmaXggKyBuYW1lO1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICAgIHN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBjYXRjaChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDYW5ub3QgYWNjZXNzIGxvY2FsL3Nlc3Npb24gc3RvcmFnZTonLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkKG5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgdmFyIGtleSA9IHRoaXMucHJvcHNQcmVmaXggKyBuYW1lO1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2Vba2V5XSB8fCBzZXNzaW9uU3RvcmFnZVtrZXldIHx8IG51bGw7XG4gIH1cbn1cblxubGV0IGF1dGggPSBuZXcgTG9vcEJhY2tBdXRoKCk7XG5cblxuLyoqXG4gKiBEZWZhdWx0IGVycm9yIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9ySGFuZGxlciB7XG4gIHB1YmxpYyBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UpIHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkuZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICB9XG59XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgcHJvdGVjdGVkIHBhdGg6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEh0dHApIHByb3RlY3RlZCBodHRwOiBIdHRwLCBcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEVycm9ySGFuZGxlcikgcHJvdGVjdGVkIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge1xuICAgIGlmICghZXJyb3JIYW5kbGVyKSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlciA9IG5ldyBFcnJvckhhbmRsZXIoKTtcbiAgICB9XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBhdGggZm9yIGJ1aWxkaW5nIHBhcnQgb2YgVVJMIGZvciBBUElcbiAgICogQHJldHVybiBzdHJpbmdcbiAgICovXG4gIHByb3RlY3RlZCBnZXRQYXRoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucGF0aDtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0KCkge1xuICAgIHRoaXMucGF0aCA9IFwiaHR0cHM6Ly9sb2NhbGhvc3Q6MzAwMC9hcGlcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHJlcXVlc3RcbiAgICogQHBhcmFtIHN0cmluZyAgbWV0aG9kICAgIFJlcXVlc3QgbWV0aG9kIChHRVQsIFBPU1QsIFBVVClcbiAgICogQHBhcmFtIHN0cmluZyAgdXJsICAgICAgIFJlcXVlc3QgdXJsIChteS1ob3N0L215LXVybC86aWQpXG4gICAqIEBwYXJhbSBhbnkgICAgIHVybFBhcmFtcyBWYWx1ZXMgb2YgdXJsIHBhcmFtZXRlcnNcbiAgICogQHBhcmFtIGFueSAgICAgcGFyYW1zICAgIFBhcmFtZXRlcnMgZm9yIGJ1aWxkaW5nIHVybCAoZmlsdGVyIGFuZCBvdGhlcilcbiAgICogQHBhcmFtIGFueSAgICAgZGF0YSAgICAgIFJlcXVlc3QgYm9keVxuICAgKi9cbiAgcHVibGljIHJlcXVlc3QobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCB1cmxQYXJhbXM6IGFueSA9IHt9LCBcbiAgICAgICAgICAgICAgICAgcGFyYW1zOiBhbnkgPSB7fSwgZGF0YTogYW55ID0gbnVsbCkge1xuICAgIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBoZWFkZXJzLmFwcGVuZCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICAgIGlmIChhdXRoLmdldEFjY2Vzc1Rva2VuSWQoKSkge1xuICAgICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBhdXRoLmdldEFjY2Vzc1Rva2VuSWQoKSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RVcmwgPSB1cmw7XG4gICAgbGV0IGtleTogc3RyaW5nO1xuICAgIGZvciAoa2V5IGluIHVybFBhcmFtcykge1xuICAgICAgcmVxdWVzdFVybCA9IHJlcXVlc3RVcmwucmVwbGFjZShuZXcgUmVnRXhwKFwiOlwiICsga2V5ICsgXCIoXFwvfCQpXCIsIFwiZ1wiKSwgdXJsUGFyYW1zW2tleV0gKyBcIiQxXCIpO1xuICAgIH1cblxuICAgIGxldCBwYXJhbWV0ZXJzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAodmFyIHBhcmFtIGluIHBhcmFtcykge1xuICAgICAgcGFyYW1ldGVycy5wdXNoKHBhcmFtICsgJz0nICsgKHR5cGVvZiBwYXJhbXNbcGFyYW1dID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KHBhcmFtc1twYXJhbV0pIDogcGFyYW1zW3BhcmFtXSkpO1xuICAgIH1cbiAgICByZXF1ZXN0VXJsICs9IChwYXJhbWV0ZXJzID8gJz8nIDogJycpICsgcGFyYW1ldGVycy5qb2luKCcmJyk7XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHtcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogcmVxdWVzdFVybCxcbiAgICAgIGJvZHk6IGRhdGEgPyBKU09OLnN0cmluZ2lmeShkYXRhKSA6IHVuZGVmaW5lZFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KHJlcXVlc3QpXG4gICAgICAubWFwKHJlcyA9PiAocmVzLnRleHQoKSAhPSBcIlwiID8gcmVzLmpzb24oKSA6IHt9KSlcbiAgICAgIC5jYXRjaCh0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcik7XG4gIH1cbn1cblxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBVc2VyYCBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzZXJBcGkgZXh0ZW5kcyBCYXNlTG9vcEJhY2tBcGkge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoSHR0cCkgaHR0cDogSHR0cCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEVycm9ySGFuZGxlcikgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJcbiAgKSB7XG4gICAgc3VwZXIoaHR0cCwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBhY2Nlc3NUb2tlbnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBhY2Nlc3NUb2tlbnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgVXNlcmAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19hY2Nlc3NUb2tlbnMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9hY2Nlc3NUb2tlbnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBhY2Nlc3NUb2tlbnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBhY2Nlc3NUb2tlbnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19hY2Nlc3NUb2tlbnMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9hY2Nlc3NUb2tlbnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBhY2Nlc3NUb2tlbnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBhY2Nlc3NUb2tlbnNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgVXNlcmAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX2FjY2Vzc1Rva2VucyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vycy86aWQvYWNjZXNzVG9rZW5zLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgYWNjZXNzVG9rZW5zIG9mIFVzZXIuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19hY2Nlc3NUb2tlbnMoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9hY2Nlc3NUb2tlbnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gYWNjZXNzVG9rZW5zIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19hY2Nlc3NUb2tlbnMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9hY2Nlc3NUb2tlbnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBhY2Nlc3NUb2tlbnMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBVc2VyIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX2FjY2Vzc1Rva2VucyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvOmlkL2FjY2Vzc1Rva2Vuc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBhY2Nlc3NUb2tlbnMgb2YgVXNlci5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBVc2VyIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19hY2Nlc3NUb2tlbnMoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9hY2Nlc3NUb2tlbnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZU1hbnkoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBtb2RlbCBpbnN0YW5jZSBvciBpbnNlcnQgYSBuZXcgb25lIGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzLzppZC9leGlzdHNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcyBhbmQgaW5jbHVkZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vycy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgVXNlcmAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vycy9maW5kT25lXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHVwZGF0ZWRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBbGwod2hlcmU6IGFueSA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYFVzZXJgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL1VzZXJzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgVXNlciBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBVc2VyYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUF0dHJpYnV0ZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY2hhbmdlIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogIC0gYG9wdGlvbnNgIOKAkyBge29iamVjdH1gIC0gXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjaGFuZ2VzYCDigJMgYHtSZWFkYWJsZVN0cmVhbX1gIC0gXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlQ2hhbmdlU3RyZWFtKG9wdGlvbnM6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vycy9jaGFuZ2Utc3RyZWFtXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ2luIGEgdXNlciB3aXRoIHVzZXJuYW1lL2VtYWlsIGFuZCBwYXNzd29yZC5cbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyBpbmNsdWRlIFJlbGF0ZWQgb2JqZWN0cyB0byBpbmNsdWRlIGluIHRoZSByZXNwb25zZS4gU2VlIHRoZSBkZXNjcmlwdGlvbiBvZiByZXR1cm4gdmFsdWUgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogICBEZWZhdWx0IHZhbHVlOiBgdXNlcmAuXG4gICAqXG4gICAqICAtIGByZW1lbWJlck1lYCAtIGBib29sZWFuYCAtIFdoZXRoZXIgdGhlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzXG4gICAqICAgICBzaG91bGQgYmUgcmVtZW1iZXJlZCBpbiBsb2NhbFN0b3JhZ2UgYWNyb3NzIGFwcC9icm93c2VyIHJlc3RhcnRzLlxuICAgKiAgICAgRGVmYXVsdDogYHRydWVgLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIHJlc3BvbnNlIGJvZHkgY29udGFpbnMgcHJvcGVydGllcyBvZiB0aGUgQWNjZXNzVG9rZW4gY3JlYXRlZCBvbiBsb2dpbi5cbiAgICogRGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBgaW5jbHVkZWAgcGFyYW1ldGVyLCB0aGUgYm9keSBtYXkgY29udGFpbiBhZGRpdGlvbmFsIHByb3BlcnRpZXM6XG4gICAqIFxuICAgKiAgIC0gYHVzZXJgIC0gYHtVc2VyfWAgLSBEYXRhIG9mIHRoZSBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIuIChgaW5jbHVkZT11c2VyYClcbiAgICogXG4gICAqXG4gICAqL1xuICBwdWJsaWMgbG9naW4oY3JlZGVudGlhbHM6IGFueSwgaW5jbHVkZTogYW55ID0gXCJ1c2VyXCIpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvbG9naW5cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChpbmNsdWRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5pbmNsdWRlID0gaW5jbHVkZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgY3JlZGVudGlhbHMpXG4gICAgICAuc2hhcmUoKTtcbiAgICAgIHJlc3VsdC5zdWJzY3JpYmUoXG4gICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBhdXRoLnNldFVzZXIocmVzcG9uc2UuaWQsIHJlc3BvbnNlLnVzZXJJZCwgcmVzcG9uc2UudXNlcik7XG4gICAgICAgICAgYXV0aC5zZXRSZW1lbWJlck1lKHRydWUpO1xuICAgICAgICAgIGF1dGguc2F2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAoKSA9PiBudWxsXG4gICAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IGEgdXNlciB3aXRoIGFjY2VzcyB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogIC0gYGFjY2Vzc190b2tlbmAg4oCTIGB7c3RyaW5nfWAgLSBEbyBub3Qgc3VwcGx5IHRoaXMgYXJndW1lbnQsIGl0IGlzIGF1dG9tYXRpY2FsbHkgZXh0cmFjdGVkIGZyb20gcmVxdWVzdCBoZWFkZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIGxvZ291dCgpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvbG9nb3V0XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKVxuICAgICAgLnNoYXJlKCk7XG4gICAgICByZXN1bHQuc3Vic2NyaWJlKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgYXV0aC5jbGVhclVzZXIoKTtcbiAgICAgICAgICBhdXRoLmNsZWFyU3RvcmFnZSgpO1xuICAgICAgICB9LFxuICAgICAgICAoKSA9PiBudWxsXG4gICAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlybSBhIHVzZXIgcmVnaXN0cmF0aW9uIHdpdGggZW1haWwgdmVyaWZpY2F0aW9uIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0gc3RyaW5nIHVpZCBcbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyB0b2tlbiBcbiAgICpcbiAgICogQHBhcmFtIHN0cmluZyByZWRpcmVjdCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBjb25maXJtKHVpZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCByZWRpcmVjdDogc3RyaW5nID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvY29uZmlybVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBwYXNzd29yZCBmb3IgYSB1c2VyIHdpdGggZW1haWwuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgcmVzZXRQYXNzd29yZChvcHRpb25zOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvVXNlcnMvcmVzZXRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBsYlNlcnZpY2VzLlVzZXIjZ2V0Q3VycmVudFxuICAgKiBAbWV0aG9kT2YgbGJTZXJ2aWNlcy5Vc2VyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBHZXQgZGF0YSBvZiB0aGUgY3VycmVudGx5IGxvZ2dlZCB1c2VyLiBGYWlsIHdpdGggSFRUUCByZXN1bHQgNDAxXG4gICAqIHdoZW4gdGhlcmUgaXMgbm8gdXNlciBsb2dnZWQgaW4uXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKi9cbiAgcHVibGljIGdldEN1cnJlbnQoKTogYW55IHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9Vc2Vyc1wiICsgXCIvOmlkXCI7XG4gICAgbGV0IGlkOiBhbnkgPSBhdXRoLmdldEN1cnJlbnRVc2VySWQoKTtcbiAgICBpZiAoaWQgPT0gbnVsbCkge1xuICAgICAgaWQgPSAnX19hbm9ueW1vdXNfXyc7XG4gICAgfVxuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMpXG4gICAgICAuc2hhcmUoKTtcbiAgICAgIHJlc3VsdC5zdWJzY3JpYmUoXG4gICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBhdXRoLnNldEN1cnJlbnRVc2VyRGF0YShyZXNwb25zZSk7XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IG51bGxcbiAgICAgICk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGF0YSBvZiB0aGUgY3VycmVudGx5IGxvZ2dlZCB1c2VyIHRoYXQgd2FzIHJldHVybmVkIGJ5IHRoZSBsYXN0XG4gICAqIGNhbGwgdG8ge0BsaW5rIGxiU2VydmljZXMuVXNlciNsb2dpbn0gb3JcbiAgICoge0BsaW5rIGxiU2VydmljZXMuVXNlciNnZXRDdXJyZW50fS4gUmV0dXJuIG51bGwgd2hlbiB0aGVyZVxuICAgKiBpcyBubyB1c2VyIGxvZ2dlZCBpbiBvciB0aGUgZGF0YSBvZiB0aGUgY3VycmVudCB1c2VyIHdlcmUgbm90IGZldGNoZWRcbiAgICogeWV0LlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQSBVc2VyIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIGdldENhY2hlZEN1cnJlbnQoKSB7XG4gICAgcmV0dXJuIGF1dGguZ2V0Q3VycmVudFVzZXJEYXRhKCk7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgbGJTZXJ2aWNlcy5Vc2VyI2lzQXV0aGVudGljYXRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY3VycmVudCB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQgKGxvZ2dlZCBpbikuXG4gICAqL1xuICBwdWJsaWMgaXNBdXRoZW50aWNhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRJZCgpICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgbGJTZXJ2aWNlcy5Vc2VyI2dldEN1cnJlbnRJZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgSWQgb2YgdGhlIGN1cnJlbnRseSBsb2dnZWQtaW4gdXNlciBvciBudWxsLlxuICAgKi9cbiAgcHVibGljIGdldEN1cnJlbnRJZCgpIHtcbiAgICByZXR1cm4gYXV0aC5nZXRDdXJyZW50VXNlcklkKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG1vZGVsIHJlcHJlc2VudGVkIGJ5IHRoaXMgJHJlc291cmNlLFxuICAgKiBpLmUuIGBVc2VyYC5cbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE5hbWUoKSB7XG4gICAgcmV0dXJuIFwiVXNlclwiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENCb29raW5nVHlwZXNgIG1vZGVsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ0Jvb2tpbmdUeXBlc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENDbGluaWNCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENDbGluaWNCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DQ2xpbmljQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDQ2xpbmljQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDQ2xpbmljQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fQ2xpbmljcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2xpbmtfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBDbGluaWNzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fQ2xpbmljcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBDbGluaWNzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2V4aXN0c19fQ2xpbmljcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJIRUFEXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NsaW5pY3MvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiBDQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DQ2xpbmljQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIENDbGluaWNCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIENDbGluaWNCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2RlbGV0ZV9fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DQ2xpbmljQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDbGluaWNzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NsaW5pY3MoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DbGluaWNzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19DbGluaWNzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIENsaW5pY3Mgb2YgQ0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NsaW5pY3MoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NsaW5pY3MvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cHNlcnQoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZEJ5SWQoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy91cGRhdGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmICh3aGVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMud2hlcmUgPSB3aGVyZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUJ5SWQoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmICh3aGVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMud2hlcmUgPSB3aGVyZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYXR0cmlidXRlcyBmb3IgYSBtb2RlbCBpbnN0YW5jZSBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY2hhbmdlIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogIC0gYG9wdGlvbnNgIOKAkyBge29iamVjdH1gIC0gXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjaGFuZ2VzYCDigJMgYHtSZWFkYWJsZVN0cmVhbX1gIC0gXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlQ2hhbmdlU3RyZWFtKG9wdGlvbnM6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzL2NoYW5nZS1zdHJlYW1cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY0Jvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DQ2xpbmljQm9va2luZ1R5cGVzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgcmVmcmVzaDogYm9vbGVhbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXMvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvckJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DRG9jdG9yQm9va2luZ1R5cGVzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgcmVmcmVzaDogYm9vbGVhbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JCb29raW5nVHlwZXMvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgcmVwcmVzZW50ZWQgYnkgdGhpcyAkcmVzb3VyY2UsXG4gICAqIGkuZS4gYENCb29raW5nVHlwZXNgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDQm9va2luZ1R5cGVzXCI7XG4gIH1cbn1cblxuLyoqXG4gKiBBcGkgZm9yIHRoZSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDQ2xpbmljQm9va2luZ1R5cGVzQXBpIGV4dGVuZHMgQmFzZUxvb3BCYWNrQXBpIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEh0dHApIGh0dHA6IEh0dHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFcnJvckhhbmRsZXIpIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge1xuICAgIHN1cGVyKGh0dHAsIGVycm9ySGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY0Jvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Cb29raW5nVHlwZXMoaWQ6IGFueSwgcmVmcmVzaDogYm9vbGVhbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXMvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGJvb2xlYW4gcmVmcmVzaCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ2xpbmljcyhpZDogYW55LCByZWZyZXNoOiBib29sZWFuID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY0Jvb2tpbmdUeXBlcy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGUoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZU1hbnkoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIG1vZGVsIGluc3RhbmNlIG9yIGluc2VydCBhIG5ldyBvbmUgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIG1vZGVsIGluc3RhbmNlIGV4aXN0cyBpbiB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGV4aXN0c2Ag4oCTIGB7Ym9vbGVhbn1gIC0gXG4gICAqL1xuICBwdWJsaWMgZXhpc3RzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzLzppZC9leGlzdHNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcyBhbmQgaW5jbHVkZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhbGwgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZChmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZE9uZShmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY0Jvb2tpbmdUeXBlcy9maW5kT25lXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHVwZGF0ZWRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBbGwod2hlcmU6IGFueSA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNCb29raW5nVHlwZXMvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBkZWxldGVCeUlkKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50IGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIGNvdW50KHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQXR0cmlidXRlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY0Jvb2tpbmdUeXBlcy9jaGFuZ2Utc3RyZWFtXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENDbGluaWNCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENDbGluaWNCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DQ2xpbmljQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NCb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDQ2xpbmljQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDQ2xpbmljQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19DQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NCb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQm9va2luZ1R5cGVzLzppZC9DQ2xpbmljQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY0Jvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZU1hbnlfX0NCb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NCb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NCb29raW5nVHlwZXMvOmlkL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiBDQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQ0Jvb2tpbmdUeXBlc19fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0Jvb2tpbmdUeXBlcy86aWQvQ0NsaW5pY0Jvb2tpbmdUeXBlcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG1vZGVsIHJlcHJlc2VudGVkIGJ5IHRoaXMgJHJlc291cmNlLFxuICAgKiBpLmUuIGBDQ2xpbmljQm9va2luZ1R5cGVzYC5cbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENEb2N0b3JCb29raW5nVHlwZXNgIG1vZGVsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ0RvY3RvckJvb2tpbmdUeXBlc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JCb29raW5nVHlwZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGJvb2xlYW4gcmVmcmVzaCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvckJvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQm9va2luZ1R5cGVzKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzLzppZC9Cb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHJlZnJlc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLnJlZnJlc2ggPSByZWZyZXNoO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9yQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBib29sZWFuIHJlZnJlc2ggXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0RvY3RvcnMoaWQ6IGFueSwgcmVmcmVzaDogYm9vbGVhbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JCb29raW5nVHlwZXMvOmlkL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHJlZnJlc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLnJlZnJlc2ggPSByZWZyZXNoO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlKGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvckJvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBtb2RlbCBpbnN0YW5jZSBvciBpbnNlcnQgYSBuZXcgb25lIGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckJvb2tpbmdUeXBlcy86aWQvZXhpc3RzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMgYW5kIGluY2x1ZGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvckJvb2tpbmdUeXBlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckJvb2tpbmdUeXBlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JCb29raW5nVHlwZXMvZmluZE9uZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcyB1cGRhdGVkXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQWxsKHdoZXJlOiBhbnkgPSB1bmRlZmluZWQsIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JCb29raW5nVHlwZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckJvb2tpbmdUeXBlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjb3VudCh3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckJvb2tpbmdUeXBlcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvckJvb2tpbmdUeXBlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQm9va2luZ1R5cGVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUF0dHJpYnV0ZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckJvb2tpbmdUeXBlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGFuZ2Ugc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiAgLSBgb3B0aW9uc2Ag4oCTIGB7b2JqZWN0fWAgLSBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNoYW5nZXNgIOKAkyBge1JlYWRhYmxlU3RyZWFtfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVDaGFuZ2VTdHJlYW0ob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JCb29raW5nVHlwZXMvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ0RvY3RvckJvb2tpbmdUeXBlc2AuXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxOYW1lKCkge1xuICAgIHJldHVybiBcIkNEb2N0b3JCb29raW5nVHlwZXNcIjtcbiAgfVxufVxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBDRG9jdG9yQ2xpbmljc2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDRG9jdG9yQ2xpbmljc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9yQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9ycyhpZDogYW55LCByZWZyZXNoOiBib29sZWFuID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvOmlkL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHJlZnJlc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLnJlZnJlc2ggPSByZWZyZXNoO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9yQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ2xpbmljcyhpZDogYW55LCByZWZyZXNoOiBib29sZWFuID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvOmlkL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHJlZnJlc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLnJlZnJlc2ggPSByZWZyZXNoO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvckNsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JDbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQ2xpbmljcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JDbGluaWNzL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvckNsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JDbGluaWNzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9yQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JDbGluaWNzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvckNsaW5pY3MvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ0RvY3RvckNsaW5pY3NgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDRG9jdG9yQ2xpbmljc1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENEb2N0b3JzYCBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENEb2N0b3JzQXBpIGV4dGVuZHMgQmFzZUxvb3BCYWNrQXBpIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEh0dHApIGh0dHA6IEh0dHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFcnJvckhhbmRsZXIpIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge1xuICAgIHN1cGVyKGh0dHAsIGVycm9ySGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQm9va2luZ1R5cGVzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIEJvb2tpbmdUeXBlcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGJlbG9uZ3NUbyByZWxhdGlvbiBQZXJzb24uXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fUGVyc29uKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUGVyc29uXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChyZWZyZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5yZWZyZXNoID0gcmVmcmVzaDtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBQZW9wbGUuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBQZW9wbGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fUGVvcGxlKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUGVvcGxlLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fUGVvcGxlKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUGVvcGxlLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fUGVvcGxlKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGUvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUm9zdGVycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFJvc3RlcnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fUm9zdGVycyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Jvc3RlcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBSb3N0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUm9zdGVyc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX1Jvc3RlcnMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUm9zdGVycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFJvc3RlcnNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19Sb3N0ZXJzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19DbGluaWNzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ2xpbmljcyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQ2xpbmljcyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBDbGluaWNzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX191bmxpbmtfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIENsaW5pY3MgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19leGlzdHNfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBCb29raW5nVHlwZXMgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQm9va2luZ1R5cGVzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2RlbGV0ZV9fQm9va2luZ1R5cGVzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIEJvb2tpbmdUeXBlcyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Cb29raW5nVHlwZXMoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIFBlb3BsZSBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19QZW9wbGUoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gUGVvcGxlIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fUGVvcGxlKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUGVvcGxlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgUGVvcGxlIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19QZW9wbGUoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgUGVvcGxlIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX1Blb3BsZShpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Blb3BsZS9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgUm9zdGVycyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Sb3N0ZXJzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fUm9zdGVycyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Jvc3RlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Sb3N0ZXJzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBSb3N0ZXJzIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX1Jvc3RlcnMoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDbGluaWNzIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NsaW5pY3MoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DbGluaWNzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NsaW5pY3MoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIENsaW5pY3Mgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQ2xpbmljcyhpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGUoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIG1vZGVsIGluc3RhbmNlIG9yIGluc2VydCBhIG5ldyBvbmUgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9leGlzdHNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcyBhbmQgaW5jbHVkZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZChmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy9maW5kT25lXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHVwZGF0ZWRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBbGwod2hlcmU6IGFueSA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUJ5SWQoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50IGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIGNvdW50KHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQXR0cmlidXRlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGFuZ2Ugc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiAgLSBgb3B0aW9uc2Ag4oCTIGB7b2JqZWN0fWAgLSBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNoYW5nZXNgIOKAkyBge1JlYWRhYmxlU3RyZWFtfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVDaGFuZ2VTdHJlYW0ob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzL2NoYW5nZS1zdHJlYW1cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzLzpuay9Cb29raW5nVHlwZXMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQm9va2luZ1R5cGVzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIEJvb2tpbmdUeXBlcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19DbGluaWNzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvRG9jdG9ycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2xpbmtfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgRG9jdG9ycyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fdW5saW5rX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvRG9jdG9ycy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBEb2N0b3JzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkhFQURcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgQm9va2luZ1R5cGVzIG9mIENDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DbGluaWNzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzLzpuay9Cb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBCb29raW5nVHlwZXMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBEb2N0b3JzIG9mIENDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIERvY3RvcnMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQ2xpbmljcy86bmsvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIERvY3RvcnMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIERvY3RvcnMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDQ2xpbmljQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDQ2xpbmljQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0Jvb2tpbmdUeXBlc19fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ0NsaW5pY0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENDbGluaWNCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENDbGluaWNCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDQ2xpbmljQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDQ2xpbmljQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2xpbmtfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIENsaW5pY3MgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fdW5saW5rX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NsaW5pY3MvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBleGlzdGVuY2Ugb2YgQ2xpbmljcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIENDbGluaWNCb29raW5nVHlwZXMgb2YgQ0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0Jvb2tpbmdUeXBlc19fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0Jvb2tpbmdUeXBlc19fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ0NsaW5pY0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIENsaW5pY3Mgb2YgQ0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBDbGluaWNzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBDbGluaWNzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBDbGluaWNzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhuazogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9yQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBib29sZWFuIHJlZnJlc2ggXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DRG9jdG9yQm9va2luZ1R5cGVzX19Eb2N0b3JzKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQm9va2luZ1R5cGVzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChyZWZyZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5yZWZyZXNoID0gcmVmcmVzaDtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGJlbG9uZ3NUbyByZWxhdGlvbiBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvckNsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGJvb2xlYW4gcmVmcmVzaCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NEb2N0b3JDbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQ2xpbmljcy86aWQvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DQ29tcGFuaWVzX19Eb2N0b3JzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NDb21wYW5pZXNfX0RvY3RvcnMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ0NvbXBhbmllc19fRG9jdG9ycyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgRG9jdG9ycyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDRG9jdG9yc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ0NvbXBhbmllc19fRG9jdG9ycyhpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENEb2N0b3JzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DQ29tcGFuaWVzX19Eb2N0b3JzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0RvY3RvcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVNYW55X19DQ29tcGFuaWVzX19Eb2N0b3JzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgRG9jdG9ycyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19DQ29tcGFuaWVzX19Eb2N0b3JzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIERvY3RvcnMgb2YgQ0NvbXBhbmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NDb21wYW5pZXNfX0RvY3RvcnMoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ0RvY3RvcnNgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDRG9jdG9yc1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENHYWxsZXJ5YCBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENHYWxsZXJ5QXBpIGV4dGVuZHMgQmFzZUxvb3BCYWNrQXBpIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEh0dHApIGh0dHA6IEh0dHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFcnJvckhhbmRsZXIpIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge1xuICAgIHN1cGVyKGh0dHAsIGVycm9ySGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlKGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DR2FsbGVyaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NHYWxsZXJpZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIG1vZGVsIGluc3RhbmNlIGV4aXN0cyBpbiB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGV4aXN0c2Ag4oCTIGB7Ym9vbGVhbn1gIC0gXG4gICAqL1xuICBwdWJsaWMgZXhpc3RzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DR2FsbGVyaWVzLzppZC9leGlzdHNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcyBhbmQgaW5jbHVkZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDR2FsbGVyeWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDR2FsbGVyeWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DR2FsbGVyaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZE9uZShmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllcy9maW5kT25lXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHVwZGF0ZWRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBbGwod2hlcmU6IGFueSA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NHYWxsZXJpZXMvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjb3VudCh3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIEdhbGxlcnkgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQXR0cmlidXRlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DR2FsbGVyaWVzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0dhbGxlcmllcy9jaGFuZ2Utc3RyZWFtXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEdhbGxlcmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgR2FsbGVyaWVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENHYWxsZXJ5YCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0NDb21wYW5pZXNfX0dhbGxlcmllcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvR2FsbGVyaWVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgR2FsbGVyaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBHYWxsZXJpZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19DQ29tcGFuaWVzX19HYWxsZXJpZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEdhbGxlcmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgR2FsbGVyaWVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENHYWxsZXJ5YCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ0NvbXBhbmllc19fR2FsbGVyaWVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIEdhbGxlcmllcyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDR2FsbGVyeWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ0NvbXBhbmllc19fR2FsbGVyaWVzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9HYWxsZXJpZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gR2FsbGVyaWVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENHYWxsZXJ5YCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DQ29tcGFuaWVzX19HYWxsZXJpZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gR2FsbGVyaWVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0dhbGxlcnlgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVNYW55X19DQ29tcGFuaWVzX19HYWxsZXJpZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIEdhbGxlcmllcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19DQ29tcGFuaWVzX19HYWxsZXJpZXMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBHYWxsZXJpZXMgb2YgQ0NvbXBhbmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NDb21wYW5pZXNfX0dhbGxlcmllcyhpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvR2FsbGVyaWVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgcmVwcmVzZW50ZWQgYnkgdGhpcyAkcmVzb3VyY2UsXG4gICAqIGkuZS4gYENHYWxsZXJ5YC5cbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQ0dhbGxlcnlcIjtcbiAgfVxufVxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBDUGVvcGxlYCBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENQZW9wbGVBcGkgZXh0ZW5kcyBCYXNlTG9vcEJhY2tBcGkge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoSHR0cCkgaHR0cDogSHR0cCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEVycm9ySGFuZGxlcikgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJcbiAgKSB7XG4gICAgc3VwZXIoaHR0cCwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUGVvcGxlYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Blb3BsZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENQZW9wbGVgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Blb3BsZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cHNlcnQoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Blb3BsZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NQZW9wbGUvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENQZW9wbGVgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZEJ5SWQoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NQZW9wbGUvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUGVvcGxlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBmaXJzdCBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUGVvcGxlL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Blb3BsZS91cGRhdGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmICh3aGVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMud2hlcmUgPSB3aGVyZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUGVvcGxlYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUJ5SWQoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NQZW9wbGUvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NQZW9wbGUvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmICh3aGVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMud2hlcmUgPSB3aGVyZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYXR0cmlidXRlcyBmb3IgYSBtb2RlbCBpbnN0YW5jZSBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBQZW9wbGUgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NQZW9wbGUvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgY2hhbmdlIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogIC0gYG9wdGlvbnNgIOKAkyBge29iamVjdH1gIC0gXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjaGFuZ2VzYCDigJMgYHtSZWFkYWJsZVN0cmVhbX1gIC0gXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlQ2hhbmdlU3RyZWFtKG9wdGlvbnM6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUGVvcGxlL2NoYW5nZS1zdHJlYW1cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gUGVyc29uLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGJvb2xlYW4gcmVmcmVzaCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ0RvY3RvcnNfX1BlcnNvbihpZDogYW55LCByZWZyZXNoOiBib29sZWFuID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1BlcnNvblwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENQZW9wbGVgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fQ0RvY3RvcnNfX1Blb3BsZShpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Blb3BsZS86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIFBlb3BsZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFBlb3BsZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGUvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBQZW9wbGUuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBQZW9wbGVcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Blb3BsZS86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIFBlb3BsZSBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENQZW9wbGVgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gUGVvcGxlIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUGVvcGxlYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUGVvcGxlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBQZW9wbGUgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Blb3BsZWAgb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZU1hbnlfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBQZW9wbGUgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBEb2N0b3JzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgUGVvcGxlIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NEb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9QZW9wbGUvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ1Blb3BsZWAuXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxOYW1lKCkge1xuICAgIHJldHVybiBcIkNQZW9wbGVcIjtcbiAgfVxufVxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBDUm9zdGVyc2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDUm9zdGVyc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnMvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVycy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJzL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnMvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgUm9zdGVycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnMvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiA8ZW0+XG4gICAgICAgICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLilcbiAgICAgICAgICogPC9lbT5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYHJvc3RlcnNgIOKAkyBge2FueX1gIC0gXG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVSb3N0ZXIoZGVmOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlcnMvZ2VuZXJhdGVSb3N0ZXJcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRlZik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBSb3N0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUm9zdGVyc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Jvc3RlcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBSb3N0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUm9zdGVyc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NEb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUm9zdGVycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIFJvc3RlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBSb3N0ZXJzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0RvY3RvcnMvOmlkL1Jvc3RlcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBSb3N0ZXJzIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlcnNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NEb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9ycy86aWQvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fQ0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlTWFueV9fQ0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgUm9zdGVycyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvcnMgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2RlbGV0ZV9fQ0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIFJvc3RlcnMgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgRG9jdG9ycyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQ0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NEb2N0b3JzLzppZC9Sb3N0ZXJzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgcmVwcmVzZW50ZWQgYnkgdGhpcyAkcmVzb3VyY2UsXG4gICAqIGkuZS4gYENSb3N0ZXJzYC5cbiAgICovXG4gIHB1YmxpYyBnZXRNb2RlbE5hbWUoKSB7XG4gICAgcmV0dXJuIFwiQ1Jvc3RlcnNcIjtcbiAgfVxufVxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBDUm9zdGVyRGF5c2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDUm9zdGVyRGF5c0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJEYXlzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlckRheXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyRGF5c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyRGF5c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlckRheXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJEYXlzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlckRheXMvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJEYXlzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyRGF5cy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyRGF5c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyRGF5c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJEYXlzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJEYXlzL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlckRheXMvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlckRheXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlckRheXMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJEYXlzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgUm9zdGVyRGF5cyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyRGF5c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJEYXlzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlckRheXMvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ1Jvc3RlckRheXNgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDUm9zdGVyRGF5c1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENSb3N0ZXJQbGFjZXNgIG1vZGVsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ1Jvc3RlclBsYWNlc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJQbGFjZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlKGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyUGxhY2VzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclBsYWNlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyUGxhY2VzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBtb2RlbCBpbnN0YW5jZSBvciBpbnNlcnQgYSBuZXcgb25lIGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyUGxhY2VzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyUGxhY2VzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclBsYWNlcy86aWQvZXhpc3RzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMgYW5kIGluY2x1ZGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclBsYWNlc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclBsYWNlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyUGxhY2VzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJQbGFjZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyUGxhY2VzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJQbGFjZXMvZmluZE9uZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcyB1cGRhdGVkXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQWxsKHdoZXJlOiBhbnkgPSB1bmRlZmluZWQsIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyUGxhY2VzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJQbGFjZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclBsYWNlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjb3VudCh3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclBsYWNlcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIFJvc3RlclBsYWNlcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyUGxhY2VzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUF0dHJpYnV0ZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclBsYWNlcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGFuZ2Ugc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiAgLSBgb3B0aW9uc2Ag4oCTIGB7b2JqZWN0fWAgLSBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNoYW5nZXNgIOKAkyBge1JlYWRhYmxlU3RyZWFtfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVDaGFuZ2VTdHJlYW0ob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJQbGFjZXMvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ1Jvc3RlclBsYWNlc2AuXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxOYW1lKCkge1xuICAgIHJldHVybiBcIkNSb3N0ZXJQbGFjZXNcIjtcbiAgfVxufVxuXG4vKipcbiAqIEFwaSBmb3IgdGhlIGBDUmV2aWV3c2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDUmV2aWV3c0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSZXZpZXdzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGNyZWF0ZShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jldmlld3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUmV2aWV3c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUmV2aWV3c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYW4gZXhpc3RpbmcgbW9kZWwgaW5zdGFuY2Ugb3IgaW5zZXJ0IGEgbmV3IG9uZSBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jldmlld3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSZXZpZXdzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jldmlld3MvOmlkL2V4aXN0c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSBtb2RlbCBpbnN0YW5jZSBieSBpZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzIGFuZCBpbmNsdWRlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSZXZpZXdzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUmV2aWV3cy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUmV2aWV3c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUmV2aWV3c1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSZXZpZXdzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSZXZpZXdzL2ZpbmRPbmVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgdXBkYXRlZFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUFsbCh3aGVyZTogYW55ID0gdW5kZWZpbmVkLCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jldmlld3MvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jldmlld3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jldmlld3MvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnQgaW5zdGFuY2VzIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IHdoZXJlIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgY291bnQod2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSZXZpZXdzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgUmV2aWV3cyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUmV2aWV3c2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBdHRyaWJ1dGVzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSZXZpZXdzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jldmlld3MvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ1Jldmlld3NgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDUmV2aWV3c1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENSb3N0ZXJUaW1lc2AgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDUm9zdGVyVGltZXNBcGkgZXh0ZW5kcyBCYXNlTG9vcEJhY2tBcGkge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoSHR0cCkgaHR0cDogSHR0cCxcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEVycm9ySGFuZGxlcikgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJcbiAgKSB7XG4gICAgc3VwZXIoaHR0cCwgZXJyb3JIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyVGltZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlKGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyVGltZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBhbmQgcGVyc2lzdCBpdCBpbnRvIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyVGltZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclRpbWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBtb2RlbCBpbnN0YW5jZSBvciBpbnNlcnQgYSBuZXcgb25lIGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDUm9zdGVyVGltZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBzZXJ0KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJUaW1lc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJUaW1lcy86aWQvZXhpc3RzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMgYW5kIGluY2x1ZGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclRpbWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRCeUlkKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyVGltZXMvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclRpbWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJUaW1lc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgZmlyc3QgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENSb3N0ZXJUaW1lc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyVGltZXMvZmluZE9uZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcyB1cGRhdGVkXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQWxsKHdoZXJlOiBhbnkgPSB1bmRlZmluZWQsIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DUm9zdGVyVGltZXMvdXBkYXRlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclRpbWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUJ5SWQoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NSb3N0ZXJUaW1lcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjb3VudCh3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclRpbWVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAod2hlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLndoZXJlID0gd2hlcmU7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgZm9yIGEgbW9kZWwgaW5zdGFuY2UgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgUm9zdGVyVGltZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ1Jvc3RlclRpbWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUF0dHJpYnV0ZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclRpbWVzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNoYW5nZSBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqICAtIGBvcHRpb25zYCDigJMgYHtvYmplY3R9YCAtIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY2hhbmdlc2Ag4oCTIGB7UmVhZGFibGVTdHJlYW19YCAtIFxuICAgKi9cbiAgcHVibGljIGNyZWF0ZUNoYW5nZVN0cmVhbShvcHRpb25zOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ1Jvc3RlclRpbWVzL2NoYW5nZS1zdHJlYW1cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgcmVwcmVzZW50ZWQgYnkgdGhpcyAkcmVzb3VyY2UsXG4gICAqIGkuZS4gYENSb3N0ZXJUaW1lc2AuXG4gICAqL1xuICBwdWJsaWMgZ2V0TW9kZWxOYW1lKCkge1xuICAgIHJldHVybiBcIkNSb3N0ZXJUaW1lc1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENDbGluaWNzYCBtb2RlbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENDbGluaWNzQXBpIGV4dGVuZHMgQmFzZUxvb3BCYWNrQXBpIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEh0dHApIGh0dHA6IEh0dHAsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChFcnJvckhhbmRsZXIpIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyXG4gICkge1xuICAgIHN1cGVyKGh0dHAsIGVycm9ySGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQm9va2luZ1R5cGVzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fQm9va2luZ1R5cGVzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIEJvb2tpbmdUeXBlcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19Eb2N0b3JzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fRG9jdG9ycyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0RvY3RvcnMoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2xpbmtfX0RvY3RvcnMoaWQ6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgRG9jdG9ycyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fdW5saW5rX19Eb2N0b3JzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBEb2N0b3JzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19Eb2N0b3JzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkhFQURcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgQm9va2luZ1R5cGVzIG9mIENDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBCb29raW5nVHlwZXMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0Jvb2tpbmdUeXBlcyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBCb29raW5nVHlwZXMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQm9va2luZ1R5cGVzKGlkOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBEb2N0b3JzIG9mIENDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0RvY3RvcnMoaWQ6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIERvY3RvcnMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Eb2N0b3JzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIERvY3RvcnMgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0RvY3RvcnMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIERvY3RvcnMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fRG9jdG9ycyhpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZGVsIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGUoZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlTWFueShkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV4aXN0aW5nIG1vZGVsIGluc3RhbmNlIG9yIGluc2VydCBhIG5ldyBvbmUgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgbW9kZWwgaW5zdGFuY2UgZXhpc3RzIGluIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBNb2RlbCBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgZXhpc3RzYCDigJMgYHtib29sZWFufWAgLSBcbiAgICovXG4gIHB1YmxpYyBleGlzdHMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9leGlzdHNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbW9kZWwgaW5zdGFuY2UgYnkgaWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgTW9kZWwgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcyBhbmQgaW5jbHVkZVxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGFsbCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgZmlsdGVyIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBGaWx0ZXIgZGVmaW5pbmcgZmllbGRzLCB3aGVyZSwgaW5jbHVkZSwgb3JkZXIsIG9mZnNldCwgYW5kIGxpbWl0XG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZmluZChmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kT25lKGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy9maW5kT25lXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHVwZGF0ZWRcbiAgICovXG4gIHB1YmxpYyB1cGRhdGVBbGwod2hlcmU6IGFueSA9IHVuZGVmaW5lZCwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGRlbGV0ZUJ5SWQoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50IGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSB3aGVyZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIGNvdW50KHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQXR0cmlidXRlcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGFuZ2Ugc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiAgLSBgb3B0aW9uc2Ag4oCTIGB7b2JqZWN0fWAgLSBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNoYW5nZXNgIOKAkyBge1JlYWRhYmxlU3RyZWFtfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVDaGFuZ2VTdHJlYW0ob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzL2NoYW5nZS1zdHJlYW1cIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDQ2xpbmljQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDQ2xpbmljQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DQ2xpbmljQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ0NsaW5pY0Jvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0Jvb2tpbmdUeXBlc19fQ0NsaW5pY0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DQ2xpbmljQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0Jvb2tpbmdUeXBlc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19saW5rX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBDbGluaWNzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIENsaW5pY3MgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2V4aXN0c19fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkhFQURcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0Jvb2tpbmdUeXBlcy86bmsvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDQ2xpbmljQm9va2luZ1R5cGVzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DQ2xpbmljQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Cb29raW5nVHlwZXNfX0NDbGluaWNCb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NDbGluaWNCb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgQ0NsaW5pY0Jvb2tpbmdUeXBlcyBvZiBDQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQm9va2luZ1R5cGVzX19DQ2xpbmljQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DQ2xpbmljQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDbGluaWNzIG9mIENCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Cb29raW5nVHlwZXNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Cb29raW5nVHlwZXMvOm5rL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgQ2xpbmljcyBvZiBDQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvQm9va2luZ1R5cGVzLzpuay9DbGluaWNzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fRG9jdG9yc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9Cb29raW5nVHlwZXMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQm9va2luZ1R5cGVzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX3VubGlua19fRG9jdG9yc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIEJvb2tpbmdUeXBlcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19Eb2N0b3JzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGJlbG9uZ3NUbyByZWxhdGlvbiBQZXJzb24uXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9yc19fUGVyc29uKGlkOiBhbnksIG5rOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUGVyc29uXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChyZWZyZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5yZWZyZXNoID0gcmVmcmVzaDtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBQZW9wbGUuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBQZW9wbGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUGVvcGxlLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUGVvcGxlLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9QZW9wbGUvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUm9zdGVycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFJvc3RlcnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL1Jvc3RlcnMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBSb3N0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUm9zdGVyc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUm9zdGVycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFJvc3RlcnNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19Eb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fRG9jdG9yc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fRG9jdG9yc19fQ2xpbmljcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBDbGluaWNzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX191bmxpbmtfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIENsaW5pY3MgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19leGlzdHNfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBCb29raW5nVHlwZXMgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9yc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2RlbGV0ZV9fRG9jdG9yc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIEJvb2tpbmdUeXBlcyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Eb2N0b3JzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9Cb29raW5nVHlwZXMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIFBlb3BsZSBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gUGVvcGxlIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUGVvcGxlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgUGVvcGxlIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9QZW9wbGVcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgUGVvcGxlIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0RvY3RvcnNfX1Blb3BsZShpZDogYW55LCBuazogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZS9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgUm9zdGVycyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Eb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIG5rOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBuazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NsaW5pY3MvOmlkL0RvY3RvcnMvOm5rL1Jvc3RlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Eb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIG5rOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBSb3N0ZXJzIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9Sb3N0ZXJzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBDbGluaWNzIG9mIENEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDbGluaWNzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDbGluaWNzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIENsaW5pY3Mgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Eb2N0b3JzX19DbGluaWNzKG5rOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljcy86aWQvRG9jdG9ycy86bmsvQ2xpbmljcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYmVsb25nc1RvIHJlbGF0aW9uIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ2xpbmljQm9va2luZ1R5cGVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBib29sZWFuIHJlZnJlc2ggXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DQ2xpbmljQm9va2luZ1R5cGVzX19DbGluaWNzKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ2xpbmljQm9va2luZ1R5cGVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChyZWZyZXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5yZWZyZXNoID0gcmVmcmVzaDtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGJlbG9uZ3NUbyByZWxhdGlvbiBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIERvY3RvckNsaW5pY3MgaWRcbiAgICpcbiAgICogQHBhcmFtIGJvb2xlYW4gcmVmcmVzaCBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NEb2N0b3JDbGluaWNzX19DbGluaWNzKGlkOiBhbnksIHJlZnJlc2g6IGJvb2xlYW4gPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DRG9jdG9yQ2xpbmljcy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DQ29tcGFuaWVzX19DbGluaWNzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NDb21wYW5pZXNfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ0NvbXBhbmllc19fQ2xpbmljcyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgQ2xpbmljcyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ2xpbmljc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ0NvbXBhbmllc19fQ2xpbmljcyhpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBDbGluaWNzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDbGluaWNzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DQ29tcGFuaWVzX19DbGluaWNzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBDbGluaWNzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NsaW5pY3NgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVNYW55X19DQ29tcGFuaWVzX19DbGluaWNzKGlkOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19DQ29tcGFuaWVzX19DbGluaWNzKGlkOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIENsaW5pY3Mgb2YgQ0NvbXBhbmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NDb21wYW5pZXNfX0NsaW5pY3MoaWQ6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCByZXByZXNlbnRlZCBieSB0aGlzICRyZXNvdXJjZSxcbiAgICogaS5lLiBgQ0NsaW5pY3NgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDQ2xpbmljc1wiO1xuICB9XG59XG5cbi8qKlxuICogQXBpIGZvciB0aGUgYENDb21wYW5pZXNgIG1vZGVsLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ0NvbXBhbmllc0FwaSBleHRlbmRzIEJhc2VMb29wQmFja0FwaSB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChIdHRwKSBodHRwOiBIdHRwLFxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoRXJyb3JIYW5kbGVyKSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclxuICApIHtcbiAgICBzdXBlcihodHRwLCBlcnJvckhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19DbGluaWNzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NsaW5pY3MoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19DbGluaWNzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgR2FsbGVyaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBHYWxsZXJpZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19HYWxsZXJpZXMoaWQ6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEdhbGxlcmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgR2FsbGVyaWVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fR2FsbGVyaWVzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9HYWxsZXJpZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBHYWxsZXJpZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEdhbGxlcmllc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fR2FsbGVyaWVzKGlkOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0dhbGxlcmllcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fRG9jdG9ycyhpZDogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19Eb2N0b3JzKGlkOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fRG9jdG9ycyhpZDogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgQ2xpbmljcyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGZpbHRlciBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19DbGluaWNzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2NyZWF0ZV9fQ2xpbmljcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIENsaW5pY3Mgb2YgdGhpcyBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2RlbGV0ZV9fQ2xpbmljcyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBDbGluaWNzIG9mIENDb21wYW5pZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19DbGluaWNzKGlkOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBHYWxsZXJpZXMgb2YgQ0NvbXBhbmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fR2FsbGVyaWVzKGlkOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9HYWxsZXJpZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gR2FsbGVyaWVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0dhbGxlcmllcyhpZDogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvR2FsbGVyaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgR2FsbGVyaWVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0dhbGxlcmllcyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvR2FsbGVyaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIEdhbGxlcmllcyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fR2FsbGVyaWVzKGlkOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9HYWxsZXJpZXMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIERvY3RvcnMgb2YgQ0NvbXBhbmllcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9ycyhpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0RvY3RvcnMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0RvY3RvcnMoaWQ6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgRG9jdG9ycyBvZiBDQ29tcGFuaWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IHdoZXJlIENyaXRlcmlhIHRvIG1hdGNoIG1vZGVsIGluc3RhbmNlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogRGF0YSBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgLSBgY291bnRgIOKAkyBge251bWJlcn1gIC0gXG4gICAqL1xuICBwdWJsaWMgX19jb3VudF9fRG9jdG9ycyhpZDogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlKGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgbW9kZWwgYW5kIHBlcnNpc3QgaXQgaW50byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVNYW55KGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhbiBleGlzdGluZyBtb2RlbCBpbnN0YW5jZSBvciBpbnNlcnQgYSBuZXcgb25lIGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwc2VydChkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYSBtb2RlbCBpbnN0YW5jZSBleGlzdHMgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBleGlzdHNgIOKAkyBge2Jvb2xlYW59YCAtIFxuICAgKi9cbiAgcHVibGljIGV4aXN0cyhpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvZXhpc3RzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMgYW5kIGluY2x1ZGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBmaW5kQnlJZChpZDogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGluc3RhbmNlcyBvZiB0aGUgbW9kZWwgbWF0Y2hlZCBieSBmaWx0ZXIgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIEZpbHRlciBkZWZpbmluZyBmaWVsZHMsIHdoZXJlLCBpbmNsdWRlLCBvcmRlciwgb2Zmc2V0LCBhbmQgbGltaXRcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0W10gQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBtb2RlbCBtYXRjaGVkIGJ5IGZpbHRlciBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgRmlsdGVyIGRlZmluaW5nIGZpZWxkcywgd2hlcmUsIGluY2x1ZGUsIG9yZGVyLCBvZmZzZXQsIGFuZCBsaW1pdFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIGZpbmRPbmUoZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvZmluZE9uZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcyB1cGRhdGVkXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlQWxsKHdoZXJlOiBhbnkgPSB1bmRlZmluZWQsIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzL3VwZGF0ZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIG1vZGVsIGluc3RhbmNlIGJ5IGlkIGZyb20gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIE1vZGVsIGlkXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgZGVsZXRlQnlJZChpZDogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudCBpbnN0YW5jZXMgb2YgdGhlIG1vZGVsIG1hdGNoZWQgYnkgd2hlcmUgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjb3VudCh3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKHdoZXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy53aGVyZSA9IHdoZXJlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhdHRyaWJ1dGVzIGZvciBhIG1vZGVsIGluc3RhbmNlIGFuZCBwZXJzaXN0IGl0IGludG8gdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIHVwZGF0ZUF0dHJpYnV0ZXMoaWQ6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWRcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGFuZ2Ugc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiAgLSBgb3B0aW9uc2Ag4oCTIGB7b2JqZWN0fWAgLSBcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNoYW5nZXNgIOKAkyBge1JlYWRhYmxlU3RyZWFtfWAgLSBcbiAgICovXG4gIHB1YmxpYyBjcmVhdGVDaGFuZ2VTdHJlYW0ob3B0aW9uczogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvY2hhbmdlLXN0cmVhbVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiA8ZW0+XG4gICAgICAgICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLilcbiAgICAgICAgICogPC9lbT5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYHJvc3RlcnNgIOKAkyBge2FueX1gIC0gXG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVSb3N0ZXIoZGVmOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy9nZW5lcmF0ZVJvc3RlclwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGVmKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Cb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX3VwZGF0ZUJ5SWRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Cb29raW5nVHlwZXMvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBCb29raW5nVHlwZXMgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX191bmxpbmtfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIEJvb2tpbmdUeXBlcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2V4aXN0c19fQ2xpbmljc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkhFQURcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvRG9jdG9ycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fbGlua19fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIERvY3RvcnMgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fdW5saW5rX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9DbGluaWNzLzpuay9Eb2N0b3JzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgZXhpc3RlbmNlIG9mIERvY3RvcnMgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgRG9jdG9yc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZXhpc3RzX19DbGluaWNzX19Eb2N0b3JzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkhFQURcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvRG9jdG9ycy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBCb29raW5nVHlwZXMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0NsaW5pY3NfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19DbGluaWNzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIEJvb2tpbmdUeXBlcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19DbGluaWNzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBCb29raW5nVHlwZXMgb2YgQ0NsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19DbGluaWNzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0Jvb2tpbmdUeXBlcy9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgRG9jdG9ycyBvZiBDQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fQ2xpbmljc19fRG9jdG9ycyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvQ2xpbmljcy86bmsvRG9jdG9yc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBEb2N0b3JzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgRG9jdG9ycyBvZiBDQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0NsaW5pY3NfX0RvY3RvcnMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0NsaW5pY3MvOm5rL0RvY3RvcnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBCb29raW5nVHlwZXMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZmluZEJ5SWRfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19Eb2N0b3JzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlcy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIEJvb2tpbmdUeXBlcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19Eb2N0b3JzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQVVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQm9va2luZ1R5cGVzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBCb29raW5nVHlwZXNcbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBkYXRhIFJlcXVlc3QgZGF0YS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgZXhwZWN0cyBhIHN1YnNldCBvZiBtb2RlbCBwcm9wZXJ0aWVzIGFzIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2xpbmtfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9Cb29raW5nVHlwZXMvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQm9va2luZ1R5cGVzIHJlbGF0aW9uIHRvIGFuIGl0ZW0gYnkgaWQuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIEJvb2tpbmdUeXBlc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fdW5saW5rX19Eb2N0b3JzX19Cb29raW5nVHlwZXMoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBCb29raW5nVHlwZXMgcmVsYXRpb24gdG8gYW4gaXRlbSBieSBpZC5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQm9va2luZ1R5cGVzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19leGlzdHNfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJIRUFEXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0Jvb2tpbmdUeXBlcy9yZWwvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBiZWxvbmdzVG8gcmVsYXRpb24gUGVyc29uLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYm9vbGVhbiByZWZyZXNoIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fZ2V0X19Eb2N0b3JzX19QZXJzb24oaWQ6IGFueSwgbms6IGFueSwgcmVmcmVzaDogYm9vbGVhbiA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1BlcnNvblwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAocmVmcmVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMucmVmcmVzaCA9IHJlZnJlc2g7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmluZCBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUGVvcGxlLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBQZW9wbGVcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZS86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIFBlb3BsZS5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUGVvcGxlXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZXN0cm95QnlJZF9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9QZW9wbGUvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBQZW9wbGUuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFBlb3BsZVxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fRG9jdG9yc19fUGVvcGxlKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZS86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBSb3N0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBSb3N0ZXJzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19maW5kQnlJZF9fRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBuazogYW55LCBmazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvUm9zdGVycy86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIFJvc3RlcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIFJvc3RlcnNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgbm8gZGF0YS5cbiAgICovXG4gIHB1YmxpYyBfX2Rlc3Ryb3lCeUlkX19Eb2N0b3JzX19Sb3N0ZXJzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgUm9zdGVycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgUm9zdGVyc1xuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fdXBkYXRlQnlJZF9fRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBuazogYW55LCBmazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBVVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9Sb3N0ZXJzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSByZWxhdGVkIGl0ZW0gYnkgaWQgZm9yIENsaW5pY3MuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgZmsgRm9yZWlnbiBrZXkgZm9yIENsaW5pY3NcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2ZpbmRCeUlkX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJlbGF0ZWQgaXRlbSBieSBpZCBmb3IgQ2xpbmljcy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBmayBGb3JlaWduIGtleSBmb3IgQ2xpbmljc1xuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVzdHJveUJ5SWRfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX191cGRhdGVCeUlkX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0NsaW5pY3MvOmZrXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rLFxuICAgICAgZms6IGZrXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcmVsYXRlZCBpdGVtIGJ5IGlkIGZvciBDbGluaWNzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19saW5rX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGZrOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUFVUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0NsaW5pY3MvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQ2xpbmljcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX191bmxpbmtfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0NsaW5pY3MvcmVsLzpma1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBuayxcbiAgICAgIGZrOiBma1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBleGlzdGVuY2Ugb2YgQ2xpbmljcyByZWxhdGlvbiB0byBhbiBpdGVtIGJ5IGlkLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGZrIEZvcmVpZ24ga2V5IGZvciBDbGluaWNzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19leGlzdHNfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiSEVBRFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzL3JlbC86ZmtcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmssXG4gICAgICBmazogZmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIEJvb2tpbmdUeXBlcyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9yc19fQm9va2luZ1R5cGVzKGlkOiBhbnksIG5rOiBhbnksIGZpbHRlcjogTG9vcEJhY2tGaWx0ZXJJbnRlcmZhY2UgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9Cb29raW5nVHlwZXNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCBkYXRhOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIlBPU1RcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQm9va2luZ1R5cGVzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55KSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJERUxFVEVcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIEJvb2tpbmdUeXBlcyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0RvY3RvcnNfX0Jvb2tpbmdUeXBlcyhpZDogYW55LCBuazogYW55LCB3aGVyZTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvQm9va2luZ1R5cGVzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUXVlcmllcyBQZW9wbGUgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0RvY3RvcnNfX1Blb3BsZShpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvUGVvcGxlXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuICAgIGlmIChmaWx0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW1zLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIGluIFBlb3BsZSBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zLCBkYXRhKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYWxsIFBlb3BsZSBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZVwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50cyBQZW9wbGUgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Eb2N0b3JzX19QZW9wbGUoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Blb3BsZS9jb3VudFwiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXJpZXMgUm9zdGVycyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCBmaWx0ZXIgXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdFtdIEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIDxlbT5cbiAgICogKFRoZSByZW1vdGUgbWV0aG9kIGRlZmluaXRpb24gZG9lcyBub3QgcHJvdmlkZSBhbnkgZGVzY3JpcHRpb24uXG4gICAqIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgcmVzcG9uc2UgaXMgYSBgQ0NvbXBhbmllc2Agb2JqZWN0LilcbiAgICogPC9lbT5cbiAgICovXG4gIHB1YmxpYyBfX2dldF9fRG9jdG9yc19fUm9zdGVycyhpZDogYW55LCBuazogYW55LCBmaWx0ZXI6IExvb3BCYWNrRmlsdGVySW50ZXJmYWNlID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJHRVRcIjtcblxuICAgIGxldCB1cmw6IHN0cmluZyA9IHRoaXMuZ2V0UGF0aCgpICsgXCIvQ0NvbXBhbmllcy86aWQvRG9jdG9ycy86bmsvUm9zdGVyc1wiO1xuICAgIGxldCB1cmxQYXJhbXM6IGFueSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5rOiBua1xuICAgIH07XG5cbiAgICBsZXQgcGFyYW1zOiBhbnkgPSB7fTtcbiAgICBpZiAoZmlsdGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcmFtcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpbiBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZGF0YSBSZXF1ZXN0IGRhdGEuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGV4cGVjdHMgYSBzdWJzZXQgb2YgbW9kZWwgcHJvcGVydGllcyBhcyByZXF1ZXN0IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19jcmVhdGVfX0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgbms6IGFueSwgZGF0YTogYW55ID0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IG1ldGhvZDogc3RyaW5nID0gXCJQT1NUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Jvc3RlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcywgZGF0YSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBSb3N0ZXJzIG9mIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIG5vIGRhdGEuXG4gICAqL1xuICBwdWJsaWMgX19kZWxldGVfX0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgbms6IGFueSkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiREVMRVRFXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Jvc3RlcnNcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudHMgUm9zdGVycyBvZiBDRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIGFueSBpZCBDb21wYW5pZXMgaWRcbiAgICpcbiAgICogQHBhcmFtIGFueSBuayBGb3JlaWduIGtleSBmb3IgRG9jdG9ycy5cbiAgICpcbiAgICogQHBhcmFtIG9iamVjdCB3aGVyZSBDcml0ZXJpYSB0byBtYXRjaCBtb2RlbCBpbnN0YW5jZXNcbiAgICpcbiAgICogQHJldHVybnMgb2JqZWN0IEFuIGVtcHR5IHJlZmVyZW5jZSB0aGF0IHdpbGwgYmVcbiAgICogICBwb3B1bGF0ZWQgd2l0aCB0aGUgYWN0dWFsIGRhdGEgb25jZSB0aGUgcmVzcG9uc2UgaXMgcmV0dXJuZWRcbiAgICogICBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIERhdGEgcHJvcGVydGllczpcbiAgICpcbiAgICogIC0gYGNvdW50YCDigJMgYHtudW1iZXJ9YCAtIFxuICAgKi9cbiAgcHVibGljIF9fY291bnRfX0RvY3RvcnNfX1Jvc3RlcnMoaWQ6IGFueSwgbms6IGFueSwgd2hlcmU6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL1Jvc3RlcnMvY291bnRcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG5cbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCB1cmxQYXJhbXMsIHBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyaWVzIENsaW5pY3Mgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgaWQgQ29tcGFuaWVzIGlkXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3QgZmlsdGVyIFxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3RbXSBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiA8ZW0+XG4gICAqIChUaGUgcmVtb3RlIG1ldGhvZCBkZWZpbml0aW9uIGRvZXMgbm90IHByb3ZpZGUgYW55IGRlc2NyaXB0aW9uLlxuICAgKiBUaGlzIHVzdWFsbHkgbWVhbnMgdGhlIHJlc3BvbnNlIGlzIGEgYENDb21wYW5pZXNgIG9iamVjdC4pXG4gICAqIDwvZW0+XG4gICAqL1xuICBwdWJsaWMgX19nZXRfX0RvY3RvcnNfX0NsaW5pY3MoaWQ6IGFueSwgbms6IGFueSwgZmlsdGVyOiBMb29wQmFja0ZpbHRlckludGVyZmFjZSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiR0VUXCI7XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSB0aGlzLmdldFBhdGgoKSArIFwiL0NDb21wYW5pZXMvOmlkL0RvY3RvcnMvOm5rL0NsaW5pY3NcIjtcbiAgICBsZXQgdXJsUGFyYW1zOiBhbnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBuazogbmtcbiAgICB9O1xuXG4gICAgbGV0IHBhcmFtczogYW55ID0ge307XG4gICAgaWYgKGZpbHRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJhbXMuZmlsdGVyID0gZmlsdGVyO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB0aGlzLnJlcXVlc3QobWV0aG9kLCB1cmwsIHVybFBhcmFtcywgcGFyYW1zKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2UgaW4gQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcGFyYW0gb2JqZWN0IGRhdGEgUmVxdWVzdCBkYXRhLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBleHBlY3RzIGEgc3Vic2V0IG9mIG1vZGVsIHByb3BlcnRpZXMgYXMgcmVxdWVzdCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogPGVtPlxuICAgKiAoVGhlIHJlbW90ZSBtZXRob2QgZGVmaW5pdGlvbiBkb2VzIG5vdCBwcm92aWRlIGFueSBkZXNjcmlwdGlvbi5cbiAgICogVGhpcyB1c3VhbGx5IG1lYW5zIHRoZSByZXNwb25zZSBpcyBhIGBDQ29tcGFuaWVzYCBvYmplY3QuKVxuICAgKiA8L2VtPlxuICAgKi9cbiAgcHVibGljIF9fY3JlYXRlX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnksIGRhdGE6IGFueSA9IHVuZGVmaW5lZCkge1xuICAgIGxldCBtZXRob2Q6IHN0cmluZyA9IFwiUE9TVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMsIGRhdGEpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgQ2xpbmljcyBvZiB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0gYW55IGlkIENvbXBhbmllcyBpZFxuICAgKlxuICAgKiBAcGFyYW0gYW55IG5rIEZvcmVpZ24ga2V5IGZvciBEb2N0b3JzLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYmplY3QgQW4gZW1wdHkgcmVmZXJlbmNlIHRoYXQgd2lsbCBiZVxuICAgKiAgIHBvcHVsYXRlZCB3aXRoIHRoZSBhY3R1YWwgZGF0YSBvbmNlIHRoZSByZXNwb25zZSBpcyByZXR1cm5lZFxuICAgKiAgIGZyb20gdGhlIHNlcnZlci5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyBubyBkYXRhLlxuICAgKi9cbiAgcHVibGljIF9fZGVsZXRlX19Eb2N0b3JzX19DbGluaWNzKGlkOiBhbnksIG5rOiBhbnkpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkRFTEVURVwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzXCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ291bnRzIENsaW5pY3Mgb2YgQ0RvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBhbnkgbmsgRm9yZWlnbiBrZXkgZm9yIERvY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSBvYmplY3Qgd2hlcmUgQ3JpdGVyaWEgdG8gbWF0Y2ggbW9kZWwgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIG9iamVjdCBBbiBlbXB0eSByZWZlcmVuY2UgdGhhdCB3aWxsIGJlXG4gICAqICAgcG9wdWxhdGVkIHdpdGggdGhlIGFjdHVhbCBkYXRhIG9uY2UgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAqICAgZnJvbSB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBEYXRhIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAtIGBjb3VudGAg4oCTIGB7bnVtYmVyfWAgLSBcbiAgICovXG4gIHB1YmxpYyBfX2NvdW50X19Eb2N0b3JzX19DbGluaWNzKG5rOiBhbnksIHdoZXJlOiBhbnkgPSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbWV0aG9kOiBzdHJpbmcgPSBcIkdFVFwiO1xuXG4gICAgbGV0IHVybDogc3RyaW5nID0gdGhpcy5nZXRQYXRoKCkgKyBcIi9DQ29tcGFuaWVzLzppZC9Eb2N0b3JzLzpuay9DbGluaWNzL2NvdW50XCI7XG4gICAgbGV0IHVybFBhcmFtczogYW55ID0ge1xuICAgICAgbms6IG5rXG4gICAgfTtcblxuICAgIGxldCBwYXJhbXM6IGFueSA9IHt9O1xuXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVxdWVzdChtZXRob2QsIHVybCwgdXJsUGFyYW1zLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgcmVwcmVzZW50ZWQgYnkgdGhpcyAkcmVzb3VyY2UsXG4gICAqIGkuZS4gYENDb21wYW5pZXNgLlxuICAgKi9cbiAgcHVibGljIGdldE1vZGVsTmFtZSgpIHtcbiAgICByZXR1cm4gXCJDQ29tcGFuaWVzXCI7XG4gIH1cbn1cblxuXG5cbiJdfQ==
