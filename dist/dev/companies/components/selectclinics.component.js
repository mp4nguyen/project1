"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("angular2/core");
var common_1 = require('angular2/common');
var dialog_component_1 = require("../../shared/components/dialog/dialog.component");
var logging_service_1 = require('../../shared/services/logging.service');
var clinic_model_1 = require('../models/clinic.model');
var input_component_1 = require('../../shared/components/input/input.component');
var companies_services_1 = require('../services/companies.services');
var SelectClinicComponent = (function () {
    function SelectClinicComponent(_log, _companyServices) {
        var _this = this;
        this._log = _log;
        this._companyServices = _companyServices;
        this.clinic = new clinic_model_1.Clinic(null);
        this.components = new Array();
        this.clinics = [];
        this.isNew = true;
        this.clinicIdControl = new common_1.Control();
        this.components.push({ control: this.clinicIdControl, type: 'option', title: 'Clinic', placeholder: 'Booking Type', isRequired: true, requiredMsg: 'Booking type is required', labelColumnClass: 'col-md-3 control-label', inputColumnClass: 'col-md-9', values: this.clinics, displayProperty: 'clinicName', returnProperty: 'clinicId' });
        this.myForm = new common_1.ControlGroup({
            doctorId: this.clinicIdControl
        });
        this.myForm.valueChanges.subscribe(function (data) { _this._log.log('clinic form = ', JSON.stringify(_this.myForm.value)); });
    }
    SelectClinicComponent.prototype.ngOnInit = function () {
    };
    SelectClinicComponent.prototype.openDialog = function (clinic) {
        var _this = this;
        this.clinics = this._companyServices.getCanselectingClinics();
        this._log.log(' get doctors be able to select = ', this.clinics);
        this.components[0] = { control: this.clinicIdControl, type: 'option', title: 'Clinic', placeholder: 'Booking Type', isRequired: true, requiredMsg: 'Booking type is required', labelColumnClass: 'col-md-3 control-label', inputColumnClass: 'col-md-9', values: this.clinics, displayProperty: 'clinicName', returnProperty: 'clinicId' };
        if (clinic) {
            this.isNew = false;
            this.clinic = clinic;
            this.updateView();
        }
        else {
            this.isNew = true;
            this.clinic = new clinic_model_1.Clinic(null);
            this.updateView();
        }
        this.myDialog.activate().subscribe(function (code) { _this._log.log('dialog return code =', code); }, function (err) { _this._log.log('dialog return err =', err); }, function () { _this._log.log('dialog completed'); });
    };
    SelectClinicComponent.prototype.updateView = function () {
        this.clinicIdControl.updateValue(this.clinic.clinicId);
    };
    SelectClinicComponent.prototype.remove = function () {
        this._companyServices.doctorRemoveClinic(this.clinicIdControl.value);
        this.myDialog.ok(null);
    };
    SelectClinicComponent.prototype.add = function () {
        this._companyServices.doctorAddClinic(this.clinicIdControl.value);
        this.myDialog.ok(null);
    };
    __decorate([
        core_1.ViewChild('myDialog'), 
        __metadata('design:type', dialog_component_1.DialogComponent)
    ], SelectClinicComponent.prototype, "myDialog", void 0);
    SelectClinicComponent = __decorate([
        core_1.Component({
            selector: 'select-clinic',
            directives: [dialog_component_1.DialogComponent, input_component_1.InputComponent],
            template: "\n    <my-dialog #myDialog>\n        <div class=\"modal-header\">\n            <button type=\"button\" (click)=\"myDialog.close()\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"></button>\n            <h4 class=\"modal-title\">Booking Type</h4>\n        </div>\n        <div class=\"modal-body\"> \n             <div class=\"portlet-body form\">\n                    <form role=\"form\">\n                        <div class=\"form-body\">\n                            <div class=\"row\">\n                                <div class=\"col-md-12\">\n                                    \n                                    <div *ngIf=\"isNew\"><my-input [isSubmitted]=\"isSubmitted\" [options]=\"components[0]\"></my-input></div>                                    \n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button (click)=\"myDialog.cancel()\" type=\"button\" class=\"btn dark btn-outline\" data-dismiss=\"modal\">Close</button>\n            <button *ngIf=\"!isNew\" (click)=\"remove()\" type=\"button\" class=\"btn red\">Remove</button>\n            <button *ngIf=\"isNew\" (click)=\"add()\" type=\"button\" class=\"btn green\">Add</button>\n        </div>\n    </my-dialog>    \n    "
        }), 
        __metadata('design:paramtypes', [logging_service_1.MyLogger, companies_services_1.CompaniesService])
    ], SelectClinicComponent);
    return SelectClinicComponent;
}());
exports.SelectClinicComponent = SelectClinicComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBhbmllcy9jb21wb25lbnRzL3NlbGVjdGNsaW5pY3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxQkFBZ0QsZUFBZSxDQUFDLENBQUE7QUFDaEUsdUJBQTBFLGlCQUFpQixDQUFDLENBQUE7QUFFNUYsaUNBQThCLGlEQUFpRCxDQUFDLENBQUE7QUFDaEYsZ0NBQXVCLHVDQUF1QyxDQUFDLENBQUE7QUFDL0QsNkJBQXFCLHdCQUF3QixDQUFDLENBQUE7QUFDOUMsZ0NBQThCLCtDQUErQyxDQUFDLENBQUE7QUFDOUUsbUNBQStCLGdDQUFnQyxDQUFDLENBQUE7QUFtQ2hFO0lBWUksK0JBQW9CLElBQWEsRUFBUyxnQkFBa0M7UUFaaEYsaUJBeUVDO1FBN0R1QixTQUFJLEdBQUosSUFBSSxDQUFTO1FBQVMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVJwRSxXQUFNLEdBQVcsSUFBSSxxQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLGVBQVUsR0FBa0IsSUFBSSxLQUFLLEVBQVUsQ0FBQztRQUkvQyxZQUFPLEdBQVcsRUFBRSxDQUFDO1FBQ3JCLFVBQUssR0FBWSxJQUFJLENBQUM7UUFJMUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGdCQUFPLEVBQUUsQ0FBQztRQUVyQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksRUFBQyxRQUFRLEVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUMsV0FBVyxFQUFFLDBCQUEwQixFQUFDLGdCQUFnQixFQUFDLHdCQUF3QixFQUFDLGdCQUFnQixFQUFDLFVBQVUsRUFBQyxNQUFNLEVBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxlQUFlLEVBQUMsWUFBWSxFQUFDLGNBQWMsRUFBQyxVQUFVLEVBQUMsQ0FBQyxD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LENBQUM7SUF0RUQ7UUFBQyxnQkFBUyxDQUFDLFVBQVUsQ0FBQzs7MkRBQUE7SUFuQzFCO1FBQUMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFVBQVUsRUFBRSxDQUFDLGtDQUFlLEVBQUMsZ0NBQWMsQ0FBQztZQUM1QyxRQUFRLEVBQ1IsNDJDQTBCQztTQUNKLENBQUM7OzZCQUFBO0lBMkVGLDRCQUFDO0FBQUQsQ0F6RUEsQUF5RUMsSUFBQTtBQXpFWSw2QkFBcUIsd0JBeUVqQyxDQUFBIiwiZmlsZSI6ImNvbXBhbmllcy9jb21wb25lbnRzL3NlbGVjdGNsaW5pY3MuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkluaXQsIENvbXBvbmVudCxWaWV3Q2hpbGQsSW5wdXR9IGZyb20gXCJhbmd1bGFyMi9jb3JlXCI7XG5pbXBvcnQge0NvbnRyb2wsIFZhbGlkYXRvcnMsIE5nRm9ybU1vZGVsLCBDb250cm9sR3JvdXAsRm9ybUJ1aWxkZXJ9ICBmcm9tICdhbmd1bGFyMi9jb21tb24nO1xuXG5pbXBvcnQge0RpYWxvZ0NvbXBvbmVudH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50XCI7XG5pbXBvcnQge015TG9nZ2VyfSBmcm9tICcuLi8uLi9zaGFyZWQvc2VydmljZXMvbG9nZ2luZy5zZXJ2aWNlJztcbmltcG9ydCB7Q2xpbmljfSBmcm9tICcuLi9tb2RlbHMvY2xpbmljLm1vZGVsJztcbmltcG9ydCB7SW5wdXRDb21wb25lbnR9ICBmcm9tICcuLi8uLi9zaGFyZWQvY29tcG9uZW50cy9pbnB1dC9pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21wYW5pZXNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9jb21wYW5pZXMuc2VydmljZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3NlbGVjdC1jbGluaWMnLFxuICAgIGRpcmVjdGl2ZXM6IFtEaWFsb2dDb21wb25lbnQsSW5wdXRDb21wb25lbnRdLFxuICAgIHRlbXBsYXRlOiBcbiAgICBgXG4gICAgPG15LWRpYWxvZyAjbXlEaWFsb2c+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJteURpYWxvZy5jbG9zZSgpXCIgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9idXR0b24+XG4gICAgICAgICAgICA8aDQgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkJvb2tpbmcgVHlwZTwvaDQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPiBcbiAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9ydGxldC1ib2R5IGZvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGZvcm0gcm9sZT1cImZvcm1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWJvZHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cImlzTmV3XCI+PG15LWlucHV0IFtpc1N1Ym1pdHRlZF09XCJpc1N1Ym1pdHRlZFwiIFtvcHRpb25zXT1cImNvbXBvbmVudHNbMF1cIj48L215LWlucHV0PjwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIChjbGljayk9XCJteURpYWxvZy5jYW5jZWwoKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBkYXJrIGJ0bi1vdXRsaW5lXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5DbG9zZTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiAqbmdJZj1cIiFpc05ld1wiIChjbGljayk9XCJyZW1vdmUoKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biByZWRcIj5SZW1vdmU8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gKm5nSWY9XCJpc05ld1wiIChjbGljayk9XCJhZGQoKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBncmVlblwiPkFkZDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L215LWRpYWxvZz4gICAgXG4gICAgYFxufSlcblxuZXhwb3J0IGNsYXNzIFNlbGVjdENsaW5pY0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBAVmlld0NoaWxkKCdteURpYWxvZycpbXlEaWFsb2c6RGlhbG9nQ29tcG9uZW50O1xuXG4gICAgcHJpdmF0ZSBjbGluaWM6IENsaW5pYyA9IG5ldyBDbGluaWMobnVsbCk7ICAgIFxuICAgIHB1YmxpYyBjb21wb25lbnRzOiBBcnJheTxPYmplY3Q+ID0gbmV3IEFycmF5PE9iamVjdD4oKTtcbiAgICBwdWJsaWMgbXlGb3JtOiBDb250cm9sR3JvdXA7XG5cbiAgICBwcml2YXRlIGNsaW5pY0lkQ29udHJvbDpDb250cm9sOyAgIFxuICAgIHByaXZhdGUgY2xpbmljczogQ2xpbmljW109W107XG4gICAgcHJpdmF0ZSBpc05ldzogYm9vbGVhbiA9IHRydWU7ICAgIFxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbG9nOk15TG9nZ2VyLHByaXZhdGUgX2NvbXBhbnlTZXJ2aWNlczogQ29tcGFuaWVzU2VydmljZSl7XG5cbiAgICAgICAgdGhpcy5jbGluaWNJZENvbnRyb2wgPSBuZXcgQ29udHJvbCgpO1xuICAgICAgIFxuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaCh7Y29udHJvbDogdGhpcy5jbGluaWNJZENvbnRyb2wsIHR5cGU6J29wdGlvbicsdGl0bGU6ICdDbGluaWMnLCBwbGFjZWhvbGRlcjogJ0Jvb2tpbmcgVHlwZScsIGlzUmVxdWlyZWQ6IHRydWUscmVxdWlyZWRNc2c6ICdCb29raW5nIHR5cGUgaXMgcmVxdWlyZWQnLGxhYmVsQ29sdW1uQ2xhc3M6J2NvbC1tZC0zIGNvbnRyb2wtbGFiZWwnLGlucHV0Q29sdW1uQ2xhc3M6J2NvbC1tZC05Jyx2YWx1ZXM6dGhpcy5jbGluaWNzLGRpc3BsYXlQcm9wZXJ0eTonY2xpbmljTmFtZScscmV0dXJuUHJvcGVydHk6J2NsaW5pY0lkJ30pO1xuXG4gICAgICAgIHRoaXMubXlGb3JtID0gbmV3IENvbnRyb2xHcm91cCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N0b3JJZDogdGhpcy5jbGluaWNJZENvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgIHRoaXMubXlGb3JtLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoXG4gICAgICAgICAgICBkYXRhID0+IHsgdGhpcy5fbG9nLmxvZygnY2xpbmljIGZvcm0gPSAnLCBKU09OLnN0cmluZ2lmeSh0aGlzLm15Rm9ybS52YWx1ZSkpO31cbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKXtcblxuXG5cblxuICAgIH1cblxuICAgIG9wZW5EaWFsb2coY2xpbmljOkNsaW5pYyl7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNsaW5pY3MgPSB0aGlzLl9jb21wYW55U2VydmljZXMuZ2V0Q2Fuc2VsZWN0aW5nQ2xpbmljcygpOyBcblxuICAgICAgICB0aGlzLl9sb2cubG9nKCcgZ2V0IGRvY3RvcnMgYmUgYWJsZSB0byBzZWxlY3QgPSAnICwgdGhpcy5jbGluaWNzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY29tcG9uZW50c1swXSA9IHtjb250cm9sOiB0aGlzLmNsaW5pY0lkQ29udHJvbCwgdHlwZTonb3B0aW9uJyx0aXRsZTogJ0NsaW5pYycsIHBsYWNlaG9sZGVyOiAnQm9va2luZyBUeXBlJywgaXNSZXF1aXJlZDogdHJ1ZSxyZXF1aXJlZE1zZzogJ0Jvb2tpbmcgdHlwZSBpcyByZXF1aXJlZCcsbGFiZWxDb2x1bW5DbGFzczonY29sLW1kLTMgY29udHJvbC1sYWJlbCcsaW5wdXRDb2x1bW5DbGFzczonY29sLW1kLTknLHZhbHVlczp0aGlzLmNsaW5pY3MsZGlzcGxheVByb3BlcnR5OidjbGluaWNOYW1lJyxyZXR1cm5Qcm9wZXJ0eTonY2xpbmljSWQnfTtcblxuICAgICAgICBpZihjbGluaWMpe1xuICAgICAgICAgICAgdGhpcy5pc05ldyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jbGluaWMgPSBjbGluaWM7ICAgIFxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5pc05ldyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNsaW5pYyA9IG5ldyBDbGluaWMobnVsbCk7ICAgIFxuICAgICAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMubXlEaWFsb2cuYWN0aXZhdGUoKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICBjb2RlID0+IHt0aGlzLl9sb2cubG9nKCdkaWFsb2cgcmV0dXJuIGNvZGUgPScsY29kZSk7fSxcbiAgICAgICAgICAgIGVyciA9PiAge3RoaXMuX2xvZy5sb2coJ2RpYWxvZyByZXR1cm4gZXJyID0nLGVycik7fSxcbiAgICAgICAgICAgICgpID0+ICB7dGhpcy5fbG9nLmxvZygnZGlhbG9nIGNvbXBsZXRlZCcpO30sXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHVwZGF0ZVZpZXcoKXtcbiAgICAgICAgdGhpcy5jbGluaWNJZENvbnRyb2wudXBkYXRlVmFsdWUodGhpcy5jbGluaWMuY2xpbmljSWQpO1xuICAgIH1cblxuICAgIHJlbW92ZSgpeyAgICAgICAgXG4gICAgICAgIHRoaXMuX2NvbXBhbnlTZXJ2aWNlcy5kb2N0b3JSZW1vdmVDbGluaWModGhpcy5jbGluaWNJZENvbnRyb2wudmFsdWUpO1xuICAgICAgICB0aGlzLm15RGlhbG9nLm9rKG51bGwpO1xuICAgIH1cblxuICAgIGFkZCgpeyAgICAgICAgXG4gICAgICAgIC8vdGhpcy5fbG9nLmxvZygnYnQgPSAnLHRoaXMuYm9va2luZ1R5cGVJZENvbnRyb2wudmFsdWUpO1xuICAgICAgICB0aGlzLl9jb21wYW55U2VydmljZXMuZG9jdG9yQWRkQ2xpbmljKHRoaXMuY2xpbmljSWRDb250cm9sLnZhbHVlKTtcbiAgICAgICAgdGhpcy5teURpYWxvZy5vayhudWxsKTtcbiAgICB9XG59XG4iXX0=
